File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\DogShareApp.kt
Contents:
package com.dogshare

import android.app.Application
import android.util.Log
import com.dogshare.di.appModule
import com.dogshare.di.viewModelModule
import com.dogshare.repository.PreferencesRepository
import org.koin.android.ext.koin.androidContext
import org.koin.core.context.startKoin
import org.koin.java.KoinJavaComponent.inject

class DogShareApp : Application() {

    // Inject PreferencesRepository using Koin
    private val preferencesRepository: PreferencesRepository by inject(PreferencesRepository::class.java)

    override fun onCreate() {
        super.onCreate()

        Log.d("DogShareApp", "onCreate called - Initializing PreferencesManager and Koin")

        // Start Koin with the list of modules that you've defined
        startKoin {
            androidContext(this@DogShareApp) // Set the Android context for Koin
            modules(listOf(appModule, viewModelModule)) // Replace with your own module list
        }

        // Check and update the last login timestamp
        checkAndUpdateLoginTimestamp()
    }

    private fun checkAndUpdateLoginTimestamp() {
        val lastLoginTimestamp = preferencesRepository.getLastLoginTimestamp()
        val currentTime = System.currentTimeMillis()

        if (currentTime - lastLoginTimestamp > 15 * 24 * 60 * 60 * 1000L) { // 15 days in millis
            preferencesRepository.setPromptLogin(true)
        } else {
            preferencesRepository.updateLastLoginTimestamp()
            preferencesRepository.setPromptLogin(false)
        }
    }
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\di\appModule.kt
Contents:
// appModule.kt
package com.dogshare.di

import com.dogshare.repository.PreferencesRepository
import com.dogshare.services.AuthService
import com.dogshare.viewmodels.CreateAccountViewModel
import com.dogshare.viewmodels.LoginViewModel
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import org.koin.dsl.module
import org.koin.androidx.viewmodel.dsl.viewModel

val appModule = module {
    single { FirebaseAuth.getInstance() }
    single { FirebaseFirestore.getInstance() }
    single { PreferencesRepository(get(), get()) }
    single { AuthService(get()) } // Provide AuthService

    viewModel { CreateAccountViewModel(get(), get()) }
    viewModel { LoginViewModel(get()) } // New LoginViewModel
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\di\viewModelModule.kt
Contents:
// File: viewModelModule.kt
package com.dogshare.di

import com.dogshare.repository.PreferencesRepository
import com.dogshare.viewmodels.MainViewModel
import com.dogshare.viewmodels.SettingsViewModel
import com.dogshare.viewmodels.ProfileViewModel
import com.dogshare.viewmodels.LogoutViewModel
import com.dogshare.viewmodels.CreateAccountViewModel
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import org.koin.androidx.viewmodel.dsl.viewModel
import org.koin.dsl.module

val viewModelModule = module {
    // Provide FirebaseAuth instance
    single { FirebaseAuth.getInstance() }

    // Provide FirebaseFirestore instance
    single { FirebaseFirestore.getInstance() }

    // Provide PreferencesRepository with Context and FirebaseFirestore as dependencies
    single { PreferencesRepository(get(), get()) }

    // Provide MainViewModel with FirebaseAuth as a dependency
    viewModel { MainViewModel(get()) }

    // Provide SettingsViewModel with PreferencesRepository as a dependency
    viewModel { SettingsViewModel(get()) }

    // Provide ProfileViewModel for ProfileScreen
    viewModel { ProfileViewModel() }

    // Provide LogoutViewModel for handling logout
    viewModel { LogoutViewModel(get()) }

    // Provide CreateAccountViewModel with PreferencesRepository and FirebaseAuth as dependencies
    viewModel { CreateAccountViewModel(get(), get()) }
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\models\DogProfile.kt
Contents:
package com.dogshare.models

data class DogProfile(
    val name: String,
    val age: Int,
    val breed: String,
    val imageUrl: String // URL of the dog's image
)



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\models\UserSettings.kt
Contents:
package com.dogshare.models

data class UserSettings(
    val notificationsEnabled: Boolean = false,
    val darkModeEnabled: Boolean = false,
    val accountPrivacyEnabled: Boolean = false
)


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\navigation\AppNavigation.kt
Contents:
package com.dogshare.navigation

import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.navigation.*
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.dogshare.ui.screens.*

@Composable
fun AppNavigation(navController: NavHostController, modifier: Modifier = Modifier) {

    NavHost(navController = navController, startDestination = NavigationRoutes.Login.route, modifier = modifier) {

        // Login Screen
        composable(NavigationRoutes.Login.route) {
            LoginScreen(
                onForgotPassword = { navController.navigate(NavigationRoutes.ForgotPassword.route) },
                onCreateAccount = { navController.navigate(NavigationRoutes.CreateAccount.route) },
                onLoginSuccess = { userId ->
                    navController.navigate(NavigationRoutes.LandingPage.createRoute(userId)) {
                        popUpTo(NavigationRoutes.Login.route) { inclusive = true }
                    }
                },
                onLoginFailed = { navController.navigate(NavigationRoutes.LoginFailed.route) }
            )
        }

        // Landing Page Screen with BottomNavigationBar
        composable(NavigationRoutes.LandingPage.route) { backStackEntry ->
            val userId = backStackEntry.arguments?.getString("userId")
            userId?.let {
                LandingPageScreen(
                    userId = it,
                    navController = navController,
                    onLogout = {
                        navController.navigate(NavigationRoutes.Login.route) {
                            popUpTo(NavigationRoutes.LandingPage.route) { inclusive = true }
                        }
                    }
                )
            } ?: navController.navigate(NavigationRoutes.Login.route) {
                popUpTo(0) { inclusive = true }  // Clear the entire backstack
            }
        }

        // Forgot Password Screen
        composable(NavigationRoutes.ForgotPassword.route) {
            ForgotPasswordScreen(
                onPasswordReset = {
                    navController.popBackStack() // Go back to the login screen
                },
                onResetFailed = {
                    // Handle reset failure, e.g., show a message
                },
                onBackToLogin = {
                    navController.popBackStack() // Go back to the login screen
                }
            )
        }

        // Create Account Screen
        composable(NavigationRoutes.CreateAccount.route) {
            CreateAccountScreen(
                onLoginInstead = {
                    navController.popBackStack() // Go back to the login screen
                }
            )
        }

        // Login Failed Screen
        composable(NavigationRoutes.LoginFailed.route) {
            LoginFailedScreen(
                onRetryLogin = {
                    navController.popBackStack() // Go back to the login screen
                },
                onForgotPassword = {
                    navController.navigate(NavigationRoutes.ForgotPassword.route)
                }
            )
        }

        // Matches Screen
        composable(NavigationRoutes.Matches.route) { backStackEntry ->
            val userId = backStackEntry.arguments?.getString("userId")
            userId?.let {
                MatchesScreen(
                    userId = it,
                    navController = navController,
                    matches = listOf("Match 1", "Match 2", "Match 3"),  // Replace with actual data
                    onMatchSelected = {
                        // Handle match selection, e.g., navigate to a match detail screen
                    }
                )
            } ?: navController.navigate(NavigationRoutes.Login.route) {
                popUpTo(0) { inclusive = true }  // Clear the entire backstack
            }
        }

        // Profile Screen
        composable(
            route = NavigationRoutes.Profile.route,
            arguments = listOf(navArgument("userId") { type = NavType.StringType })
        ) { backStackEntry ->
            val userId = backStackEntry.arguments?.getString("userId")
            if (userId != null) {
                ProfileScreen(
                    userId = userId,
                    navController = navController,
                )
            } else {
                navController.navigate(NavigationRoutes.Login.route) {
                    popUpTo(0) { inclusive = true }  // Clear the entire backstack
                }
            }
        }

        // Profile Update Screen
        composable(
            route = NavigationRoutes.ProfileUpdate.route,
            arguments = listOf(navArgument("userId") { type = NavType.StringType })
        ) { backStackEntry ->
            val userId = backStackEntry.arguments?.getString("userId") ?: throw IllegalStateException("User ID is required for ProfileUpdateScreen")
            ProfileUpdateScreen(userId = userId, navController = navController)
        }

        // Settings Screen
        composable(
            route = NavigationRoutes.Settings.route,
            arguments = listOf(navArgument("userId") { type = NavType.StringType })
        ) { backStackEntry ->
            val userId = backStackEntry.arguments?.getString("userId")
            if (userId != null) {
                SettingsScreen(
                    userId = userId,
                    navController = navController
                )
            } else {
                // Optionally navigate to an error screen or the login screen
                navController.navigate(NavigationRoutes.Login.route)
            }
        }
    }
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\navigation\NavigationExtensions.kt
Contents:
package com.dogshare.navigation

import androidx.navigation.NavController

fun NavController.navigateToLandingPage(userId: String) {
    this.navigate(NavigationRoutes.LandingPage.createRoute(userId))
}

fun NavController.navigateToProfile(userId: String) {
    this.navigate(NavigationRoutes.Profile.createRoute(userId))
}

fun NavController.navigateToMatches(userId: String) {
    this.navigate(NavigationRoutes.Matches.createRoute(userId))
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\navigation\NavigationRoutes.kt
Contents:
package com.dogshare.navigation

sealed class NavigationRoutes(val route: String) {
    object Login : NavigationRoutes("login")
    object LandingPage : NavigationRoutes("landingPage/{userId}") {
        fun createRoute(userId: String) = "landingPage/$userId"
    }
    object Matches : NavigationRoutes("matches/{userId}") {
        fun createRoute(userId: String) = "matches/$userId"
    }
    object Profile : NavigationRoutes("profile/{userId}") {
        fun createRoute(userId: String) = "profile/$userId"
    }
    object ProfileUpdate : NavigationRoutes("profileUpdateScreen/{userId}") {
        fun createRoute(userId: String) = "profileUpdateScreen/$userId"
    }
    object Settings : NavigationRoutes("settings/{userId}") {
        fun createRoute(userId: String) = "settings/$userId"
    }
    object Swiping : NavigationRoutes("swiping/{userId}") {
        fun createRoute(userId: String) = "swiping/$userId"
    }
    object ForgotPassword : NavigationRoutes("forgotPassword")
    object CreateAccount : NavigationRoutes("createAccount")
    object LoginFailed : NavigationRoutes("loginFailed")
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\repository\PreferencesRepository.kt
Contents:
package com.dogshare.repository

import android.content.Context
import android.content.SharedPreferences
import android.util.Log
import androidx.security.crypto.EncryptedSharedPreferences
import androidx.security.crypto.MasterKey
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.tasks.await

class PreferencesRepository(context: Context, private val firestore: FirebaseFirestore) {

    // Constants for preference keys
    companion object {
        private const val PREFS_NAME = "app_preferences"
        private const val KEY_NOTIFICATIONS_ENABLED = "notifications"
        private const val KEY_DARK_MODE_ENABLED = "dark_mode"
        private const val KEY_ACCOUNT_PRIVACY_ENABLED = "account_privacy"
        private const val KEY_USER_EMAIL = "user_email"
        private const val KEY_USER_ID = "user_id"
        private const val PROMPT_LOGIN_KEY = "prompt_login"
        private const val LAST_LOGIN_TIMESTAMP_KEY = "last_login_timestamp"
    }

    // Initialize encrypted SharedPreferences
    private val masterKey = MasterKey.Builder(context)
        .setKeyScheme(MasterKey.KeyScheme.AES256_GCM)
        .build()

    private val sharedPreferences: SharedPreferences = EncryptedSharedPreferences.create(
        context,
        PREFS_NAME,
        masterKey,
        EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,
        EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM
    )

    // Getters for preferences
    fun getNotificationsEnabled(): Boolean = sharedPreferences.getBoolean(KEY_NOTIFICATIONS_ENABLED, false)
    fun getDarkModeEnabled(): Boolean = sharedPreferences.getBoolean(KEY_DARK_MODE_ENABLED, false)
    fun getAccountPrivacyEnabled(): Boolean = sharedPreferences.getBoolean(KEY_ACCOUNT_PRIVACY_ENABLED, false)
    fun getUserEmail(): String? = sharedPreferences.getString(KEY_USER_EMAIL, null)
    fun getUserId(): String? = sharedPreferences.getString(KEY_USER_ID, null)
    fun getPromptLogin(): Boolean = sharedPreferences.getBoolean(PROMPT_LOGIN_KEY, false)
    fun getLastLoginTimestamp(): Long = sharedPreferences.getLong(LAST_LOGIN_TIMESTAMP_KEY, 0L)

    // Setters for preferences
    fun setNotificationsEnabled(isEnabled: Boolean) {
        sharedPreferences.edit().putBoolean(KEY_NOTIFICATIONS_ENABLED, isEnabled).apply()
    }

    fun setDarkModeEnabled(isEnabled: Boolean) {
        sharedPreferences.edit().putBoolean(KEY_DARK_MODE_ENABLED, isEnabled).apply()
    }

    fun setAccountPrivacyEnabled(isEnabled: Boolean) {
        sharedPreferences.edit().putBoolean(KEY_ACCOUNT_PRIVACY_ENABLED, isEnabled).apply()
    }

    fun setUserEmail(email: String) {
        sharedPreferences.edit().putString(KEY_USER_EMAIL, email).apply()
    }

    fun setUserId(userId: String) {
        sharedPreferences.edit().putString(KEY_USER_ID, userId).apply()
    }

    fun setPromptLogin(prompt: Boolean) {
        sharedPreferences.edit().putBoolean(PROMPT_LOGIN_KEY, prompt).apply()
    }

    fun updateLastLoginTimestamp() {
        val timestamp = System.currentTimeMillis()
        sharedPreferences.edit().putLong(LAST_LOGIN_TIMESTAMP_KEY, timestamp).apply()
        Log.d("PreferencesRepository", "Updated last login timestamp: $timestamp")
    }

    // Clear user preferences (for logout)
    fun clearUserId() {
        sharedPreferences.edit().remove(KEY_USER_ID).apply()
        Log.d("PreferencesRepository", "Cleared userId")
    }

    // Firestore functions to handle user preferences in the cloud
    suspend fun saveUserEmailToFirestore(email: String) {
        try {
            val userDocument = firestore.collection("users").document(email)
            userDocument.set(mapOf("email" to email)).await()
            setUserEmail(email)  // Save to SharedPreferences as well
        } catch (e: Exception) {
            throw e
        }
    }

    suspend fun fetchUserEmailFromFirestore(email: String): String? {
        return try {
            val documentSnapshot = firestore.collection("users").document(email).get().await()
            documentSnapshot.getString("email")
        } catch (e: Exception) {
            null
        }
    }
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\services\AuthServices.kt
Contents:
package com.dogshare.services

import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.FirebaseAuthUserCollisionException
import kotlinx.coroutines.tasks.await

class AuthService(private val auth: FirebaseAuth) {

    suspend fun signIn(email: String, password: String): Result<String> {
        return try {
            auth.signInWithEmailAndPassword(email, password).await()
            Result.success(auth.currentUser?.uid ?: "Unknown User ID")
        } catch (e: Exception) {
            Result.failure(e)
        }
    }

    suspend fun createAccount(email: String, password: String): Result<String> {
        return try {
            auth.createUserWithEmailAndPassword(email, password).await()
            Result.success(auth.currentUser?.uid ?: "Unknown User ID")
        } catch (e: FirebaseAuthUserCollisionException) {
            Result.failure(Exception("Account already exists with a different password."))
        } catch (e: Exception) {
            Result.failure(e)
        }
    }
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\MainActivity.kt
Contents:
package com.dogshare.ui

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.runtime.*
import androidx.compose.ui.platform.LocalContext
import androidx.navigation.compose.rememberNavController
import com.dogshare.navigation.AppNavigation
import com.dogshare.navigation.NavigationRoutes
import com.dogshare.ui.theme.DogShareTheme
import com.google.firebase.auth.FirebaseAuth

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)  // Ensure you're calling the superclass's onCreate method
        setContent {
            DogShareTheme {
                DogShareApp()
            }
        }
    }
}

@Composable
fun DogShareApp() {
    val navController = rememberNavController()
    val context = LocalContext.current

    // State to track when the login check is completed
    var startDestination by remember { mutableStateOf<String?>(null) }

    LaunchedEffect(key1 = true) {
        val firebaseUser = FirebaseAuth.getInstance().currentUser
        startDestination = if (firebaseUser == null) {
            NavigationRoutes.Login.route
        } else {
            NavigationRoutes.LandingPage.createRoute(firebaseUser.uid)
        }
    }

    // Ensure that the navigation setup only happens once the start destination is determined
    startDestination?.let {
        AppNavigation(navController = navController)
    }
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\components\BottomNavigationBar.kt
Contents:
package com.dogshare.ui.components

import android.util.Log
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.AccountCircle
import androidx.compose.material.icons.filled.Favorite
import androidx.compose.material.icons.filled.Home
import androidx.compose.material.icons.filled.Settings
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.navigation.NavController
import androidx.navigation.compose.currentBackStackEntryAsState
import com.dogshare.navigation.NavigationRoutes

@Composable
fun BottomNavigationBar(navController: NavController, userId: String) {
    val items = listOf(
        BottomNavItem(NavigationRoutes.LandingPage.createRoute(userId), Icons.Default.Home, "Home"),
        BottomNavItem(NavigationRoutes.Matches.createRoute(userId), Icons.Default.Favorite, "Matches"),
        BottomNavItem(NavigationRoutes.Settings.createRoute(userId), Icons.Default.Settings, "Settings"),
        BottomNavItem(NavigationRoutes.Profile.createRoute(userId), Icons.Default.AccountCircle, "Profile")
    )

    NavigationBar {
        val navBackStackEntry by navController.currentBackStackEntryAsState()
        val currentRoute = navBackStackEntry?.destination?.route

        items.forEach { item ->
            NavigationBarItem(
                icon = {
                    Icon(
                        imageVector = item.icon,
                        contentDescription = item.label,
                        tint = if (currentRoute == item.route) MaterialTheme.colorScheme.primary else Color.Gray
                    )
                },
                label = {
                    Text(
                        text = item.label,
                        color = if (currentRoute == item.route) MaterialTheme.colorScheme.primary else Color.Gray
                    )
                },
                selected = currentRoute == item.route,
                onClick = {
                    Log.d("BottomNavigationBar", "Button clicked: ${item.label}")
                    Log.d("BottomNavigationBar", "Current route: $currentRoute")
                    Log.d("BottomNavigationBar", "Navigating to: ${item.route}")
                    if (currentRoute != item.route) {
                        navController.navigate(item.route) {
                            popUpTo(navController.graph.startDestinationId) {
                                saveState = true
                            }
                            launchSingleTop = true
                            restoreState = true
                        }
                    }
                },
                alwaysShowLabel = true
            )
        }
    }
}

data class BottomNavItem(val route: String, val icon: ImageVector, val label: String)



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\components\SwipeableCard.kt
Contents:
package com.dogshare.ui.components

import androidx.compose.foundation.gestures.detectDragGestures
import androidx.compose.foundation.layout.Box
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.layout.layout
import kotlin.math.roundToInt

@Composable
fun SwipeableCard(
    state: SwipeableCardState = rememberSwipeableCardState(),
    modifier: Modifier = Modifier,
    onSwipe: (Direction) -> Unit,
    content: @Composable () -> Unit
) {
    Box(
        modifier = modifier
            .pointerInput(Unit) {
                detectDragGestures(
                    onDragEnd = {
                        state.onDragEnd()
                        state.swipeDirection?.let { direction ->
                            onSwipe(direction)
                        }
                    },
                    onDrag = { _, dragAmount ->
                        state.onDrag(dragAmount)
                    }
                )
            }
            .layout { measurable, constraints ->
                val placeable = measurable.measure(constraints)
                layout(placeable.width, placeable.height) {
                    placeable.placeRelative(state.getOffset().x, state.getOffset().y)
                }
            }
    ) {
        content()
    }
}

enum class Direction { LEFT, RIGHT, UP, DOWN }



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\components\SwipeableCardState.kt
Contents:
package com.dogshare.ui.components

import androidx.compose.runtime.*
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.unit.IntOffset
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.launch
import kotlin.math.roundToInt

@Stable
class SwipeableCardState(
    private val scope: CoroutineScope
) {
    var offsetX by mutableStateOf(0f)
        private set

    var offsetY by mutableStateOf(0f)
        private set

    var isSwiped by mutableStateOf(false)
        private set

    var swipeDirection by mutableStateOf<Direction?>(null)
        private set

    fun reset() {
        offsetX = 0f
        offsetY = 0f
        isSwiped = false
        swipeDirection = null
    }

    fun onDrag(dragAmount: Offset) {
        offsetX += dragAmount.x
        offsetY += dragAmount.y
    }

    fun onDragEnd() {
        scope.launch {
            // Determine the swipe direction and mark the card as swiped
            swipeDirection = when {
                offsetX > 200 -> Direction.RIGHT
                offsetX < -200 -> Direction.LEFT
                offsetY > 200 -> Direction.DOWN
                offsetY < -200 -> Direction.UP
                else -> null
            }

            isSwiped = swipeDirection != null
        }
    }

    fun getOffset(): IntOffset {
        return IntOffset(offsetX.roundToInt(), offsetY.roundToInt())
    }
}

@Composable
fun rememberSwipeableCardState(): SwipeableCardState {
    val scope = rememberCoroutineScope()
    return remember(scope) {
        SwipeableCardState(scope)
    }
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\composables\QuestionnaireSection.kt
Contents:
package com.dogshare.ui.composables

import android.Manifest
import android.annotation.SuppressLint
import android.content.pm.PackageManager
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.core.app.ActivityCompat
import androidx.navigation.NavHostController
import com.google.android.gms.location.LocationServices
import com.google.firebase.firestore.FirebaseFirestore

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun QuestionnaireSection(
    userId: String,
    navController: NavHostController,
    onPreferencesSaved: () -> Unit
) {
    val db = FirebaseFirestore.getInstance()
    val context = LocalContext.current

    var experience by remember { mutableStateOf("") }
    var careFrequency by remember { mutableStateOf("") }
    var breedPreference by remember { mutableStateOf("") }
    var latitude by remember { mutableStateOf<Double?>(null) }
    var longitude by remember { mutableStateOf<Double?>(null) }

    // Function to save preferences along with geolocation
    fun savePreferencesWithLocation() {
        if (latitude != null && longitude != null) {
            db.collection("user_preferences").document(userId).set(
                mapOf(
                    "Experience" to experience,
                    "Frequency" to careFrequency,
                    "Breed" to breedPreference,
                    "Latitude" to latitude,
                    "Longitude" to longitude
                )
            ).addOnSuccessListener {
                onPreferencesSaved()
                // Navigate to the SwipingSection after saving preferences
                navController.navigate("swiping/${userId}")
            }.addOnFailureListener {
                // Handle failure (e.g., show a message)
            }
        } else {
            // Handle case where location is not available
            // Show a message to the user or retry
        }
    }

    // Capture the user's location when the questionnaire is filled out for the first time
    @SuppressLint("MissingPermission")
    fun captureLocation() {
        val fusedLocationClient = LocationServices.getFusedLocationProviderClient(context)
        fusedLocationClient.lastLocation
            .addOnSuccessListener { location ->
                location?.let {
                    latitude = it.latitude
                    longitude = it.longitude
                }
            }
            .addOnFailureListener {
                // Handle the failure case, e.g., show an error message or retry
            }
    }

    // Launcher to request location permission
    val locationPermissionLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.RequestMultiplePermissions()
    ) { permissions ->
        val granted = permissions[Manifest.permission.ACCESS_FINE_LOCATION] ?: false
        if (granted) {
            // Permission is granted, capture the location
            captureLocation()
        } else {
            // Handle the case where the permission is denied
            // Show a message or navigate away
        }
    }

    // Call captureLocation when the composable is first loaded
    LaunchedEffect(Unit) {
        if (ActivityCompat.checkSelfPermission(
                context,
                Manifest.permission.ACCESS_FINE_LOCATION
            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                context,
                Manifest.permission.ACCESS_COARSE_LOCATION
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            // Request the missing permissions
            locationPermissionLauncher.launch(
                arrayOf(
                    Manifest.permission.ACCESS_FINE_LOCATION,
                    Manifest.permission.ACCESS_COARSE_LOCATION
                )
            )
        } else {
            // Permissions are already granted, capture the location
            captureLocation()
        }
    }

    Column(modifier = Modifier.padding(16.dp)) {
        Text("What’s your experience with dogs?")
        TextField(
            value = experience,
            onValueChange = { experience = it },
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp)
        )

        Text("How often can you care for a dog?")
        TextField(
            value = careFrequency,
            onValueChange = { careFrequency = it },
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp)
        )

        Text("Do you have any breed preferences?")
        TextField(
            value = breedPreference,
            onValueChange = { breedPreference = it },
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp)
        )

        Button(
            onClick = { savePreferencesWithLocation() },
            modifier = Modifier
                .fillMaxWidth()
                .padding(top = 20.dp)
        ) {
            Text("Save Preferences")
        }
    }
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\composables\SettingItemToggle.kt
Contents:
package com.dogshare.ui.components

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp

@Composable
fun SettingItemToggle(
    settingKey: String,
    settingLabel: String,
    isChecked: Boolean,
    onSettingChanged: (String, Boolean) -> Unit
) {
    Row(
        modifier = Modifier.fillMaxWidth(),
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        Text(text = settingLabel)
        Switch(
            checked = isChecked,
            onCheckedChange = { isChecked ->
                onSettingChanged(settingKey, isChecked)
            }
        )
    }
}




File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\screens\CreateAccountScreen.kt
Contents:
package com.dogshare.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp
import com.dogshare.viewmodels.CreateAccountViewModel
import org.koin.androidx.compose.koinViewModel

@Composable
fun CreateAccountScreen(
    onLoginInstead: () -> Unit,
    viewModel: CreateAccountViewModel = koinViewModel()  // Using koinViewModel for Koin dependency injection
) {
    val email by remember { viewModel.email }
    val password by remember { viewModel.password }
    val confirmPassword by remember { viewModel.confirmPassword }
    val isLoading by viewModel.isLoading.collectAsState()
    val createAccountState by viewModel.createAccountState.collectAsState()

    Scaffold { paddingValues ->
        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues),
            contentAlignment = Alignment.Center
        ) {
            if (isLoading) {
                CircularProgressIndicator()
            } else {
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    OutlinedTextField(
                        value = email,
                        onValueChange = { viewModel.updateEmail(it) },
                        label = { Text("Email") },
                        singleLine = true,
                        keyboardOptions = KeyboardOptions.Default.copy(
                            imeAction = ImeAction.Next,
                            keyboardType = KeyboardType.Email
                        ),
                        modifier = Modifier.fillMaxWidth()
                    )

                    Spacer(modifier = Modifier.height(8.dp))

                    OutlinedTextField(
                        value = password,
                        onValueChange = { viewModel.updatePassword(it) },
                        label = { Text("Password") },
                        singleLine = true,
                        keyboardOptions = KeyboardOptions.Default.copy(
                            imeAction = ImeAction.Next,
                            keyboardType = KeyboardType.Password
                        ),
                        modifier = Modifier.fillMaxWidth()
                    )

                    Spacer(modifier = Modifier.height(8.dp))

                    OutlinedTextField(
                        value = confirmPassword,
                        onValueChange = { viewModel.updateConfirmPassword(it) },
                        label = { Text("Confirm Password") },
                        singleLine = true,
                        keyboardOptions = KeyboardOptions.Default.copy(
                            imeAction = ImeAction.Done,
                            keyboardType = KeyboardType.Password
                        ),
                        modifier = Modifier.fillMaxWidth()
                    )

                    Spacer(modifier = Modifier.height(16.dp))

                    Button(
                        onClick = {
                            viewModel.createAccount()
                        },
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Text("Create Account")
                    }

                    if (createAccountState.isNotEmpty()) {
                        Text(
                            text = createAccountState,
                            style = MaterialTheme.typography.bodyMedium,
                            color = if (createAccountState.contains("successfully", ignoreCase = true)) {
                                MaterialTheme.colorScheme.primary
                            } else {
                                MaterialTheme.colorScheme.error
                            },
                            modifier = Modifier.padding(top = 16.dp)
                        )
                    }

                    Spacer(modifier = Modifier.height(16.dp))

                    TextButton(onClick = onLoginInstead) {
                        Text("Already have an account? Log in")
                    }
                }
            }
        }
    }
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\screens\ForgotPasswordScreen.kt
Contents:
package com.dogshare.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import com.google.firebase.auth.FirebaseAuth

@Composable
fun ForgotPasswordScreen(
    onPasswordReset: () -> Unit,
    onResetFailed: (String) -> Unit,
    onBackToLogin: () -> Unit
) {
    var email by remember { mutableStateOf("") }
    var isLoading by remember { mutableStateOf(false) }
    var errorMessage by remember { mutableStateOf<String?>(null) }
    val context = LocalContext.current

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(text = "Reset Password", style = MaterialTheme.typography.headlineSmall)

        Spacer(modifier = Modifier.height(16.dp))

        TextField(
            value = email,
            onValueChange = { email = it },
            label = { Text("Email") },
            modifier = Modifier.fillMaxWidth(),
            singleLine = true
        )

        Spacer(modifier = Modifier.height(16.dp))

        errorMessage?.let {
            Text(
                text = it,
                color = MaterialTheme.colorScheme.error,
                style = MaterialTheme.typography.bodyMedium,
                modifier = Modifier.padding(bottom = 16.dp)
            )
        }

        Button(
            onClick = {
                isLoading = true
                FirebaseAuth.getInstance().sendPasswordResetEmail(email)
                    .addOnCompleteListener { task ->
                        isLoading = false
                        if (task.isSuccessful) {
                            onPasswordReset()
                        } else {
                            errorMessage = task.exception?.message ?: "Failed to send reset email"
                            onResetFailed(errorMessage!!)
                        }
                    }
            },
            enabled = !isLoading,
            modifier = Modifier.fillMaxWidth()
        ) {
            if (isLoading) {
                CircularProgressIndicator(
                    modifier = Modifier.size(24.dp),
                    color = MaterialTheme.colorScheme.onPrimary
                )
            } else {
                Text(text = "Reset Password")
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        TextButton(onClick = onBackToLogin) {
            Text(text = "Back to Login")
        }
    }
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\screens\LandingPageScreen.kt
Contents:
package com.dogshare.ui.screens

import android.content.Context
import android.util.Log
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.dogshare.R
import com.dogshare.navigation.NavigationRoutes
import com.dogshare.ui.components.BottomNavigationBar
import com.google.firebase.auth.FirebaseAuth

@Composable
fun LandingPageScreen(
    userId: String?,
    navController: NavController,
    onLogout: () -> Unit
) {
    val context = LocalContext.current

    // Log userId to debug navigation issues
    Log.d("LandingPageScreen", "User ID: $userId")

    userId?.let {
        Scaffold(
            topBar = {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.Center
                ) {
                    Image(
                        painter = painterResource(id = R.drawable.ic_launcher_round),
                        contentDescription = "App Icon",
                        modifier = Modifier.size(48.dp),
                        contentScale = ContentScale.Fit
                    )

                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = "Dogshare",
                        fontSize = 24.sp,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colorScheme.onBackground
                    )
                }
            },
            bottomBar = {
                BottomNavigationBar(navController = navController, userId = it)
            }
        ) { innerPadding ->
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(innerPadding)
            ) {
                SwipingScreen(userId = userId, navController = navController)
            }
        }
    } ?: run {
        // Redirect to login if userId is null
        Log.d("LandingPageScreen", "User ID is null, navigating to Login Screen")
        navController.navigate(NavigationRoutes.Login.route) {
            popUpTo(NavigationRoutes.LandingPage.route) { inclusive = true }
        }
    }
}

private fun logoutUser(context: Context, navController: NavController) {
    Log.d("LandingPageScreen", "Logging out user")

    val auth = FirebaseAuth.getInstance()
    auth.signOut()

    val sharedPreferences = context.getSharedPreferences("app_preferences", Context.MODE_PRIVATE)
    sharedPreferences.edit().clear().apply()

    navController.navigate(NavigationRoutes.Login.route) {
        popUpTo(NavigationRoutes.LandingPage.route) { inclusive = true }
    }
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\screens\LoginFailedScreen.kt
Contents:
package com.dogshare.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp

@Composable
fun LoginFailedScreen(
    onRetryLogin: () -> Unit,
    onForgotPassword: () -> Unit
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(text = "Login Failed", style = MaterialTheme.typography.headlineSmall)

        Spacer(modifier = Modifier.height(16.dp))

        Text(text = "Please check your credentials and try again.")

        Spacer(modifier = Modifier.height(16.dp))

        Button(
            onClick = onRetryLogin,
            modifier = Modifier.fillMaxWidth()
        ) {
            Text(text = "Retry Login")
        }

        Spacer(modifier = Modifier.height(16.dp))

        TextButton(onClick = onForgotPassword) {
            Text(text = "Forgot Password?")
        }
    }
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\screens\LoginScreen.kt
Contents:
package com.dogshare.ui.screens

import android.content.Context
import android.util.Log
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.unit.dp
import com.dogshare.repository.PreferencesRepository
import com.google.firebase.auth.FirebaseAuth
import org.koin.java.KoinJavaComponent.inject

@Composable
fun LoginScreen(
    onForgotPassword: () -> Unit,
    onCreateAccount: () -> Unit,
    onLoginSuccess: (String) -> Unit,
    onLoginFailed: (String) -> Unit
) {
    var email by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }
    var loginErrorMessage by remember { mutableStateOf<String?>(null) }
    var isLoading by remember { mutableStateOf(false) }

    // Get the current context
    val context = LocalContext.current

    // Inject PreferencesRepository
    val preferencesRepository: PreferencesRepository by inject(PreferencesRepository::class.java)

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(text = "Login", style = MaterialTheme.typography.headlineSmall)

        Spacer(modifier = Modifier.height(16.dp))

        // Email TextField
        TextField(
            value = email,
            onValueChange = { email = it },
            label = { Text("Email") },
            modifier = Modifier.fillMaxWidth(),
            singleLine = true
        )

        Spacer(modifier = Modifier.height(8.dp))

        // Password TextField
        TextField(
            value = password,
            onValueChange = { password = it },
            label = { Text("Password") },
            modifier = Modifier.fillMaxWidth(),
            singleLine = true,
            visualTransformation = PasswordVisualTransformation() // Hide the password input
        )

        Spacer(modifier = Modifier.height(16.dp))

        // Display an error message if login fails
        loginErrorMessage?.let {
            Text(
                text = it,
                color = MaterialTheme.colorScheme.error,
                style = MaterialTheme.typography.bodyMedium,
                modifier = Modifier.padding(bottom = 16.dp)
            )
        }

        // Log In button
        Button(
            onClick = {
                isLoading = true
                Log.d("LoginScreen", "Attempting to log in with email: $email")
                // Handle login logic
                performLogin(
                    email = email,
                    password = password,
                    context = context,  // Pass the context here
                    preferencesRepository = preferencesRepository,
                    onLoginSuccess = { userId ->
                        isLoading = false
                        Log.d("LoginScreen", "Login successful, userId: $userId")
                        onLoginSuccess(userId)
                    },
                    onLoginFailed = { error ->
                        isLoading = false
                        Log.e("LoginScreen", "Login failed: $error")
                        loginErrorMessage = error
                        onLoginFailed(error)
                    }
                )
            },
            enabled = !isLoading,
            modifier = Modifier.fillMaxWidth()
        ) {
            if (isLoading) {
                CircularProgressIndicator(
                    modifier = Modifier.size(24.dp),
                    color = MaterialTheme.colorScheme.onPrimary
                )
            } else {
                Text(text = "Log In")
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        TextButton(onClick = onForgotPassword) {
            Text(text = "Forgot Password?")
        }

        Spacer(modifier = Modifier.height(8.dp))

        TextButton(onClick = onCreateAccount) {
            Text(text = "Create Account")
        }
    }
}

private fun performLogin(
    email: String,
    password: String,
    context: Context,
    preferencesRepository: PreferencesRepository, // Injected PreferencesRepository
    onLoginSuccess: (String) -> Unit,
    onLoginFailed: (String) -> Unit
) {
    val auth = FirebaseAuth.getInstance()
    if (email.isNotBlank() && password.isNotBlank()) {
        auth.signInWithEmailAndPassword(email, password)
            .addOnCompleteListener { task ->
                if (task.isSuccessful) {
                    val userId = auth.currentUser?.uid
                    if (userId != null) {
                        Log.d("LoginScreen", "Firebase login successful, userId: $userId")

                        // Use PreferencesRepository to handle preferences
                        preferencesRepository.setUserId(userId)
                        preferencesRepository.updateLastLoginTimestamp()
                        preferencesRepository.setPromptLogin(false)

                        onLoginSuccess(userId)
                    } else {
                        val error = "Failed to retrieve user ID"
                        Log.e("LoginScreen", error)
                        onLoginFailed(error)
                    }
                } else {
                    val error = task.exception?.message ?: "Authentication failed"
                    Log.e("LoginScreen", "Firebase login failed: $error")
                    onLoginFailed(error)
                }
            }
    } else {
        val error = "Email or password cannot be empty"
        Log.e("LoginScreen", error)
        onLoginFailed(error)
    }
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\screens\MatchesScreen.kt
Contents:
package com.dogshare.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.dogshare.ui.components.BottomNavigationBar

@Composable
fun MatchesScreen(
    userId: String,
    navController: NavController,
    matches: List<String>,  // Replace String with your Match data model
    onMatchSelected: (String) -> Unit
) {
    Scaffold(
        bottomBar = {
            BottomNavigationBar(navController = navController, userId = userId)
        }
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(innerPadding)
                .padding(16.dp),
            verticalArrangement = Arrangement.Top,
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(text = "Your Matches", style = MaterialTheme.typography.headlineSmall)

            Spacer(modifier = Modifier.height(16.dp))

            LazyColumn {
                items(matches) { match ->
                    MatchItem(match = match, onMatchSelected = onMatchSelected)
                    HorizontalDivider(modifier = Modifier.padding(vertical = 8.dp))
                }
            }
        }
    }
}

@Composable
fun MatchItem(match: String, onMatchSelected: (String) -> Unit) {
    TextButton(
        onClick = { onMatchSelected(match) },
        modifier = Modifier.fillMaxWidth()
    ) {
        Text(text = match)  // Customize to display match details
    }
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\screens\ProfileScreen.kt
Contents:
package com.dogshare.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.dogshare.viewmodels.LogoutViewModel
import com.dogshare.viewmodels.ProfileViewModel
import org.koin.androidx.compose.koinViewModel
import com.dogshare.ui.components.BottomNavigationBar

@Composable
fun ProfileScreen(
    userId: String,
    navController: NavController,
    viewModel: ProfileViewModel = koinViewModel(),
    logoutViewModel: LogoutViewModel = koinViewModel() // Inject LogoutViewModel
) {
    // Observe the states from the ProfileViewModel
    val email by viewModel.email.collectAsState()
    val petType by viewModel.petType.collectAsState()
    val petSize by viewModel.petSize.collectAsState()
    val livingCondition by viewModel.livingCondition.collectAsState()
    val activityLevel by viewModel.activityLevel.collectAsState()
    val travelDistance by viewModel.travelDistance.collectAsState()
    val saveProfileState by viewModel.saveProfileState.collectAsState()
    val isLoading by viewModel.isLoading.collectAsState()

    // Effect to fetch profile data whenever userId changes or re-fetch on re-composition
    LaunchedEffect(userId) {
        viewModel.fetchProfile(userId)
    }

    Scaffold(
        bottomBar = { BottomNavigationBar(navController = navController, userId = userId) }
    ) { innerPadding ->
        if (isLoading) {
            // Show loading indicator
            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                CircularProgressIndicator()
            }
        } else {
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(innerPadding)
                    .padding(16.dp),
                verticalArrangement = Arrangement.Center,
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(text = "Profile", style = MaterialTheme.typography.headlineSmall)
                Spacer(modifier = Modifier.height(16.dp))

                OutlinedTextField(
                    value = email,
                    onValueChange = { viewModel.updateEmail(it) },
                    label = { Text("Email") },
                    singleLine = true,
                    keyboardOptions = KeyboardOptions.Default.copy(imeAction = ImeAction.Done),
                    modifier = Modifier.fillMaxWidth()
                )
                OutlinedTextField(
                    value = petType,
                    onValueChange = { viewModel.updatePetType(it) },
                    label = { Text("Pet Type") },
                    modifier = Modifier.fillMaxWidth()
                )
                OutlinedTextField(
                    value = petSize,
                    onValueChange = { viewModel.updatePetSize(it) },
                    label = { Text("Pet Size") },
                    modifier = Modifier.fillMaxWidth()
                )
                OutlinedTextField(
                    value = livingCondition,
                    onValueChange = { viewModel.updateLivingCondition(it) },
                    label = { Text("Living Condition") },
                    modifier = Modifier.fillMaxWidth()
                )
                OutlinedTextField(
                    value = activityLevel,
                    onValueChange = { viewModel.updateActivityLevel(it) },
                    label = { Text("Activity Level") },
                    modifier = Modifier.fillMaxWidth()
                )
                OutlinedTextField(
                    value = travelDistance,
                    onValueChange = { viewModel.updateTravelDistance(it) },
                    label = { Text("Travel Distance") },
                    modifier = Modifier.fillMaxWidth()
                )

                Spacer(modifier = Modifier.height(16.dp))

                Button(
                    onClick = {
                        viewModel.saveProfile(userId)
                    },
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Text("Save Profile")
                }

                if (saveProfileState.isNotEmpty()) {
                    Text(saveProfileState, color = MaterialTheme.colorScheme.error)
                }

                Spacer(modifier = Modifier.height(16.dp))

                Button(
                    onClick = {
                        logoutViewModel.logout {
                            // Navigate to login screen after logout
                            navController.navigate("login") {
                                popUpTo(0) { inclusive = true }  // Clear back stack
                            }
                        }
                    },
                    modifier = Modifier.fillMaxWidth(),
                    colors = ButtonDefaults.buttonColors(MaterialTheme.colorScheme.error)
                ) {
                    Text("Log Out")
                }
            }
        }
    }
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\screens\SettingsScreen.kt
Contents:
package com.dogshare.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.dogshare.ui.components.BottomNavigationBar
import com.dogshare.ui.components.SettingItemToggle
import com.dogshare.viewmodels.SettingsViewModel
import org.koin.androidx.compose.koinViewModel
import androidx.compose.ui.platform.LocalContext

@Composable
fun SettingsScreen(
    userId: String,
    navController: NavController
) {
    // Inject the SettingsViewModel using Koin
    val viewModel: SettingsViewModel = koinViewModel()

    // Get the current context
    val context = LocalContext.current

    // Load preferences when the screen is composed
    LaunchedEffect(context) {
        viewModel.loadPreferences() // Ensure preferences are loaded on composition
    }

    // Collect state values from the ViewModel
    val notificationsEnabled by viewModel.notificationsEnabled.collectAsState()
    val darkModeEnabled by viewModel.darkModeEnabled.collectAsState()
    val accountPrivacyEnabled by viewModel.accountPrivacyEnabled.collectAsState()

    // Scaffold for the Settings screen layout
    Scaffold(
        bottomBar = { BottomNavigationBar(navController = navController, userId = userId) }
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(innerPadding)
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            // Title of the Settings screen
            Text(text = "Settings", style = MaterialTheme.typography.headlineSmall)

            Spacer(modifier = Modifier.height(16.dp))

            // Toggle for Notifications setting
            SettingItemToggle(
                settingKey = "notifications",
                settingLabel = "Enable Notifications",
                isChecked = notificationsEnabled,
                onSettingChanged = { key, isEnabled ->
                    viewModel.updatePreference(key, isEnabled)
                }
            )

            Spacer(modifier = Modifier.height(16.dp))

            // Toggle for Dark Mode setting
            SettingItemToggle(
                settingKey = "dark_mode",
                settingLabel = "Enable Dark Mode",
                isChecked = darkModeEnabled,
                onSettingChanged = { key, isEnabled ->
                    viewModel.updatePreference(key, isEnabled)
                }
            )

            Spacer(modifier = Modifier.height(16.dp))

            // Toggle for Account Privacy setting
            SettingItemToggle(
                settingKey = "account_privacy",
                settingLabel = "Private Account",
                isChecked = accountPrivacyEnabled,
                onSettingChanged = { key, isEnabled ->
                    viewModel.updatePreference(key, isEnabled)
                }
            )

            Spacer(modifier = Modifier.height(16.dp))
        }
    }
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\screens\SwipingScreen.kt
Contents:
package com.dogshare.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.dogshare.R
import com.dogshare.ui.components.SwipeableCard
import com.dogshare.ui.components.rememberSwipeableCardState

@Composable
fun SwipingScreen(
    userId: String?,
    navController: NavController
) {
    Scaffold(
        topBar = {
        },
        // Removed the BottomNavigationBar from here
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(innerPadding)
                .padding(16.dp),
            verticalArrangement = Arrangement.SpaceBetween
        ) {
            SwipeableCardContent()
        }
    }
}

@Composable
fun SwipeableCardContent() {
    val swipeableCardState = rememberSwipeableCardState()

    SwipeableCard(
        state = swipeableCardState,
        modifier = Modifier
            .fillMaxWidth()
            .height(400.dp),
        onSwipe = { direction ->
            // Handle swipe direction here
            println("Swiped $direction")
        }
    ) {
        // The content inside the swipeable card
        Box(
            modifier = Modifier
                .fillMaxSize(),
            contentAlignment = Alignment.Center
        ) {
            Text("Swipe Me")
        }
    }
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\theme\Color.kt
Contents:
package com.dogshare.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\theme\Greetings.kt
Contents:
package com.dogshare.ui.components

import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Button
import androidx.compose.material3.Text
import androidx.compose.material3.ButtonDefaults
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.dogshare.R

@Composable
fun Greeting(username: String, modifier: Modifier = Modifier) {
    Box(modifier = modifier.fillMaxSize()) {
        Image(
            painter = painterResource(R.drawable.dog_image),
            contentDescription = "Background image of a dog",
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop
        )
        Column(
            modifier = Modifier
                .align(Alignment.BottomCenter)
                .fillMaxWidth()
                .height(IntrinsicSize.Min),
            verticalArrangement = Arrangement.Bottom
        ) {
            Button(
                onClick = { /* TODO: Define the action */ },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(50.dp), // Adjust this value or use a percentage of screen height if needed
                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF1F223C))
            ) {
                Text(
                    "Greetings",
                    color = Color.White,
                    fontWeight = FontWeight.Bold,
                    fontSize = 18.sp
                )
            }
        }
    }
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\theme\Theme.kt
Contents:
package com.dogshare.ui.theme

import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.platform.LocalContext

private val DarkColorScheme = darkColorScheme(
    primary = Purple80,
    secondary = PurpleGrey80,
    tertiary = Pink80
)

private val LightColorScheme = lightColorScheme(
    primary = Purple40,
    secondary = PurpleGrey40,
    tertiary = Pink40

    /* Other default colors to override
    background = Color(0xFFFFFBFE),
    surface = Color(0xFFFFFBFE),
    onPrimary = Color.White,
    onSecondary = Color.White,
    onTertiary = Color.White,
    onBackground = Color(0xFF1C1B1F),
    onSurface = Color(0xFF1C1B1F),
    */
)

@Composable
fun DogShareTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }

        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = Typography,
        content = content
    )
}


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\theme\Type.kt
Contents:
package com.dogshare.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

// Set of Material typography styles to start with
val Typography = Typography(
    bodyLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 24.sp,
        letterSpacing = 0.5.sp
    )
    /* Other default text styles to override
    titleLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 22.sp,
        lineHeight = 28.sp,
        letterSpacing = 0.sp
    ),
    labelSmall = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Medium,
        fontSize = 11.sp,
        lineHeight = 16.sp,
        letterSpacing = 0.5.sp
    )
    */
)


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\viewmodels\AuthViewModel.kt
Contents:
package com.dogshare.viewmodels

import android.content.Context
import android.content.SharedPreferences
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.google.firebase.auth.FirebaseAuth
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class AuthViewModel(context: Context) : ViewModel() {

    private val PREFS_NAME = "com.dogshare.prefs"
    private val KEY_IS_LOGGED_IN = "isLoggedIn"
    private val firebaseAuth = FirebaseAuth.getInstance()

    private val prefs: SharedPreferences = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)

    private val _isLoggedIn = MutableStateFlow(false)
    val isLoggedIn: StateFlow<Boolean> = _isLoggedIn

    init {
        // Initialize login state on app launch
        updateLoginState(firebaseAuth.currentUser != null)
        listenForAuthStateChanges()
    }

    private fun listenForAuthStateChanges() {
        firebaseAuth.addAuthStateListener { auth ->
            val userLoggedIn = auth.currentUser != null
            updateLoginState(userLoggedIn)
        }
    }

    private fun updateLoginState(isLoggedIn: Boolean) {
        // Save the login state in SharedPreferences
        prefs.edit().putBoolean(KEY_IS_LOGGED_IN, isLoggedIn).apply()
        _isLoggedIn.value = isLoggedIn
    }

    fun updateLoginStatus(isLoggedIn: Boolean) {
        viewModelScope.launch {
            if (isLoggedIn) {
                // Add additional login logic here if necessary
                firebaseAuth.currentUser?.let {
                    updateLoginState(true)
                }
            } else {
                // Handle logout and clear shared preferences
                firebaseAuth.signOut()
                updateLoginState(false)
            }
        }
    }
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\viewmodels\CreateAccountViewModel.kt
Contents:
package com.dogshare.viewmodels

import androidx.compose.runtime.mutableStateOf
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.dogshare.repository.PreferencesRepository
import com.dogshare.services.AuthService
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class CreateAccountViewModel(
    private val authService: AuthService,
    private val preferencesRepository: PreferencesRepository
) : ViewModel() {

    var email = mutableStateOf("")
        private set
    var password = mutableStateOf("")
        private set
    var confirmPassword = mutableStateOf("")
        private set

    private val _createAccountState = MutableStateFlow("")
    val createAccountState: StateFlow<String> = _createAccountState

    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading

    fun updateEmail(newEmail: String) {
        email.value = newEmail
    }

    fun updatePassword(newPassword: String) {
        password.value = newPassword
    }

    fun updateConfirmPassword(newConfirmPassword: String) {
        confirmPassword.value = newConfirmPassword
    }

    fun createAccount() {
        if (password.value != confirmPassword.value) {
            _createAccountState.value = "Passwords do not match"
            return
        }

        _isLoading.value = true
        viewModelScope.launch {
            val result = authService.createAccount(email.value, password.value)
            _isLoading.value = false
            _createAccountState.value = result.fold(
                onSuccess = { "Account created successfully!" },
                onFailure = { it.message ?: "An error occurred during account creation." }
            )
        }
    }
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\viewmodels\LoginViewModel.kt
Contents:
package com.dogshare.viewmodels

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.dogshare.services.AuthService
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class LoginViewModel(
    private val authService: AuthService
) : ViewModel() {

    private val _email = MutableStateFlow("")
    val email: StateFlow<String> = _email

    private val _password = MutableStateFlow("")
    val password: StateFlow<String> = _password

    private val _loginState = MutableStateFlow("")
    val loginState: StateFlow<String> = _loginState

    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading

    fun updateEmail(newEmail: String) {
        _email.value = newEmail
    }

    fun updatePassword(newPassword: String) {
        _password.value = newPassword
    }

    fun login() {
        _isLoading.value = true
        viewModelScope.launch {
            val result = authService.signIn(_email.value, _password.value)
            _isLoading.value = false
            _loginState.value = result.fold(
                onSuccess = { "Login successful!" },
                onFailure = { it.message ?: "An error occurred during login." }
            )
        }
    }
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\viewmodels\LogOutViewModel.kt
Contents:
package com.dogshare.viewmodels

import android.content.Context
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.dogshare.repository.PreferencesRepository
import com.google.firebase.auth.FirebaseAuth
import kotlinx.coroutines.launch
import org.koin.java.KoinJavaComponent.inject

class LogoutViewModel(private val context: Context) : ViewModel() {

    private val auth: FirebaseAuth = FirebaseAuth.getInstance()

    // Inject PreferencesRepository
    private val preferencesRepository: PreferencesRepository by inject(PreferencesRepository::class.java)

    fun logout(onLogoutSuccess: () -> Unit) {
        viewModelScope.launch {
            // Sign out from Firebase Authentication
            auth.signOut()

            // Clear user-related preferences using PreferencesRepository
            preferencesRepository.clearUserId()
            preferencesRepository.setPromptLogin(true)

            // Perform additional cleanup if necessary

            // Call the success callback to indicate logout is complete
            onLogoutSuccess()
        }
    }
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\viewmodels\MainViewModel.kt
Contents:
package com.dogshare.viewmodels

import android.content.Context
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.google.firebase.auth.FirebaseAuth
import kotlinx.coroutines.launch
import org.koin.core.component.inject
import java.util.concurrent.TimeUnit

class MainViewModel(private val auth: FirebaseAuth) : ViewModel() {

    fun checkUserStatus(context: Context) {
        viewModelScope.launch {
            val sharedPreferences = context.getSharedPreferences("app_preferences", Context.MODE_PRIVATE)
            val lastLoginTimestamp = sharedPreferences.getLong("last_login_timestamp", 0L)
            val currentTime = System.currentTimeMillis()
            val daysSinceLastLogin = TimeUnit.MILLISECONDS.toDays(currentTime - lastLoginTimestamp)

            if (auth.currentUser != null && daysSinceLastLogin <= 30) {
                // TODO: Implement logic for handling active user
            } else {
                // TODO: Implement user sign-out and redirection logic
            }
        }
    }
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\viewmodels\ProfileUpdateViewModel.kt
Contents:
package com.dogshare.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.unit.dp
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import com.google.firebase.firestore.FirebaseFirestore
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack

class ProfileUpdateViewModel : ViewModel() {
    private val db = FirebaseFirestore.getInstance()

    // State for loading and updating the UI based on data operations
    var operationStatus = mutableStateOf("")
    var userProfile = mutableStateOf(UserProfile("", "", "", "", "", ""))

    fun loadUserProfile(userId: String) {
        db.collection("profiles").document(userId)
            .get()
            .addOnSuccessListener { document ->
                if (document != null && document.exists()) {
                    val profile = document.toObject(UserProfile::class.java)
                    userProfile.value = profile ?: UserProfile("", "", "", "", "", "")
                }
            }
            .addOnFailureListener {
                operationStatus.value = "Failed to load profile: ${it.message}"
            }
    }

    fun updateProfile(userId: String, data: Map<String, Any>, onSuccess: () -> Unit, onError: (String) -> Unit) {
        db.collection("profiles").document(userId)
            .set(data)
            .addOnSuccessListener { onSuccess() }
            .addOnFailureListener { e -> onError(e.localizedMessage ?: "Unknown error occurred") }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ProfileUpdateScreen(
    userId: String,
    navController: NavController,
    viewModel: ProfileUpdateViewModel = viewModel()
) {
    // This will cause the screen to reload user profile on composition or re-compositions triggered by lifecycle events.
    LaunchedEffect(key1 = userId) {
        viewModel.loadUserProfile(userId)
    }

    // Accessing state directly
    val userProfile = viewModel.userProfile.value
    val statusMessage = viewModel.operationStatus.value

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Update Profile") },
                navigationIcon = {
                    IconButton(onClick = { navController.popBackStack() }) {
                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                    }
                }
            )
        }
    ) { padding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(padding)
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(10.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            TextField(
                value = userProfile.email,
                onValueChange = { viewModel.userProfile.value = userProfile.copy(email = it) },
                label = { Text("Email") },
                singleLine = true,
                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Next)
            )
            // Additional fields are added similarly...

            Button(
                onClick = {
                    viewModel.updateProfile(userId, userProfile.toMap(), onSuccess = {
                        viewModel.operationStatus.value = "Profile Updated Successfully"
                    }, onError = { error ->
                        viewModel.operationStatus.value = error
                    })
                },
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("Update")
            }

            // Showing status message with a condition
            if (statusMessage.isNotEmpty()) {
                Text(text = statusMessage, color = MaterialTheme.colorScheme.error)
                // Clear the status message after showing it
                LaunchedEffect(statusMessage) {
                    viewModel.operationStatus.value = ""
                }
            }
        }
    }
}

// Example of a helper function inside the UserProfile data class to convert to Map
data class UserProfile(
    var email: String,
    var petType: String,
    var petSize: String,
    var livingCondition: String,
    var activityLevel: String,
    var travelDistance: String
) {
    fun toMap(): Map<String, Any> {
        return mapOf(
            "email" to email,
            "petType" to petType,
            "petSize" to petSize,
            "livingCondition" to livingCondition,
            "activityLevel" to activityLevel,
            "travelDistance" to travelDistance
        )
    }
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\viewmodels\ProfileViewModel.kt
Contents:
package com.dogshare.viewmodels

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class ProfileViewModel : ViewModel() {
    private val db = FirebaseFirestore.getInstance()

    // States for profile fields
    private val _email = MutableStateFlow("")
    val email: StateFlow<String> = _email

    private val _petType = MutableStateFlow("")
    val petType: StateFlow<String> = _petType

    private val _petSize = MutableStateFlow("")
    val petSize: StateFlow<String> = _petSize

    private val _livingCondition = MutableStateFlow("")
    val livingCondition: StateFlow<String> = _livingCondition

    private val _activityLevel = MutableStateFlow("")
    val activityLevel: StateFlow<String> = _activityLevel

    private val _travelDistance = MutableStateFlow("")
    val travelDistance: StateFlow<String> = _travelDistance

    private val _saveProfileState = MutableStateFlow("")
    val saveProfileState: StateFlow<String> = _saveProfileState

    private val _isLoading = MutableStateFlow(true)
    val isLoading: StateFlow<Boolean> = _isLoading

    // Fetch profile data from Firestore
    fun fetchProfile(userId: String) {
        _isLoading.value = true
        db.collection("profiles").document(userId).get()
            .addOnSuccessListener { document ->
                if (document.exists()) {
                    _email.value = document.getString("email") ?: ""
                    _petType.value = document.getString("petType") ?: ""
                    _petSize.value = document.getString("petSize") ?: ""
                    _livingCondition.value = document.getString("livingCondition") ?: ""
                    _activityLevel.value = document.getString("activityLevel") ?: ""
                    _travelDistance.value = document.getString("travelDistance") ?: ""
                }
                _isLoading.value = false
            }
            .addOnFailureListener { e ->
                Log.e("ProfileViewModel", "Error fetching profile: ${e.message}")
                _saveProfileState.value = "Error fetching profile: ${e.message}"
                _isLoading.value = false
            }
    }

    // Save profile data to Firestore
    fun saveProfile(userId: String) {
        _isLoading.value = true
        val userProfile = mapOf(
            "email" to _email.value,
            "petType" to _petType.value,
            "petSize" to _petSize.value,
            "livingCondition" to _livingCondition.value,
            "activityLevel" to _activityLevel.value,
            "travelDistance" to _travelDistance.value
        )
        db.collection("profiles").document(userId)
            .set(userProfile)
            .addOnSuccessListener {
                _saveProfileState.value = "Profile Updated Successfully"
                _isLoading.value = false
            }
            .addOnFailureListener { e ->
                Log.e("ProfileViewModel", "Error updating profile: ${e.message}")
                _saveProfileState.value = "Error updating profile: ${e.message}"
                _isLoading.value = false
            }
    }

    // Functions to update individual fields
    fun updateEmail(newEmail: String) {
        _email.value = newEmail
    }

    fun updatePetType(newPetType: String) {
        _petType.value = newPetType
    }

    fun updatePetSize(newPetSize: String) {
        _petSize.value = newPetSize
    }

    fun updateLivingCondition(newLivingCondition: String) {
        _livingCondition.value = newLivingCondition
    }

    fun updateActivityLevel(newActivityLevel: String) {
        _activityLevel.value = newActivityLevel
    }

    fun updateTravelDistance(newTravelDistance: String) {
        _travelDistance.value = newTravelDistance
    }
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\viewmodels\SettingsViewModel.kt
Contents:
package com.dogshare.viewmodels

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.dogshare.repository.PreferencesRepository
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class SettingsViewModel(
    private val preferencesRepository: PreferencesRepository
) : ViewModel() {

    private val _notificationsEnabled = MutableStateFlow(false)
    val notificationsEnabled: StateFlow<Boolean> = _notificationsEnabled

    private val _darkModeEnabled = MutableStateFlow(false)
    val darkModeEnabled: StateFlow<Boolean> = _darkModeEnabled

    private val _accountPrivacyEnabled = MutableStateFlow(false)
    val accountPrivacyEnabled: StateFlow<Boolean> = _accountPrivacyEnabled

    // Function to load preferences from PreferencesRepository
    fun loadPreferences() {
        viewModelScope.launch {
            _notificationsEnabled.value = preferencesRepository.getNotificationsEnabled()
            _darkModeEnabled.value = preferencesRepository.getDarkModeEnabled()
            _accountPrivacyEnabled.value = preferencesRepository.getAccountPrivacyEnabled()
        }
    }

    // Function to update preference and save it using PreferencesRepository
    fun updatePreference(key: String, value: Boolean) {
        viewModelScope.launch {
            when (key) {
                "notifications" -> {
                    _notificationsEnabled.value = value
                    preferencesRepository.setNotificationsEnabled(value)
                }
                "dark_mode" -> {
                    _darkModeEnabled.value = value
                    preferencesRepository.setDarkModeEnabled(value)
                }
                "account_privacy" -> {
                    _accountPrivacyEnabled.value = value
                    preferencesRepository.setAccountPrivacyEnabled(value)
                }
            }
        }
    }
}



