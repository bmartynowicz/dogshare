File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\DogShareApp.kt
File Name: DogShareApp.kt
File Type: .kt
Contents:
package com.dogshare

import android.app.Application
import android.util.Log
import com.dogshare.di.appModule
import com.dogshare.di.viewModelModule
import com.dogshare.repository.PreferencesRepository
import com.google.firebase.FirebaseApp
import org.koin.android.ext.koin.androidContext
import org.koin.core.context.GlobalContext
import org.koin.core.context.startKoin

class DogShareApp : Application() {

    private lateinit var preferencesRepository: PreferencesRepository

    override fun onCreate() {
        super.onCreate()
        initializeServices()
    }

    private fun initializeServices() {
        // Initialize Koin
        startKoin {
            androidContext(this@DogShareApp)
            modules(listOf(appModule, viewModelModule))
        }

        // Initialize Firebase
        FirebaseApp.initializeApp(this)

        // Setup Preferences
        setupPreferences()
    }

    private fun setupPreferences() {
        preferencesRepository = GlobalContext.get().get<PreferencesRepository>()
        checkAndUpdateLoginTimestamp()
    }

    private fun checkAndUpdateLoginTimestamp() {
        val lastLoginTimestamp = preferencesRepository.getLastLoginTimestamp()
        val currentTime = System.currentTimeMillis()
        if (currentTime - lastLoginTimestamp > 15 * 24 * 60 * 60 * 1000L) {
            preferencesRepository.setPromptLogin(true)
        } else {
            preferencesRepository.updateLastLoginTimestamp()
            preferencesRepository.setPromptLogin(false)
        }
    }
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\api\UnsplashApi.kt
File Name: UnsplashApi.kt
File Type: .kt
Contents:
package com.dogshare.network

import com.dogshare.api.UnsplashPhoto
import retrofit2.Response
import retrofit2.http.GET
import retrofit2.http.Query

interface UnsplashApi {
    @GET("photos/random")
    suspend fun getRandomDogPhotos(
        @Query("client_id") accessKey: String,
        @Query("query") query: String = "dog",
        @Query("count") count: Int = 1
    ): Response<List<UnsplashPhoto>>  // Returning Response for coroutine support
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\api\UnsplashPhoto.kt
File Name: UnsplashPhoto.kt
File Type: .kt
Contents:
package com.dogshare.api

data class UnsplashPhoto(
    val id: String,
    val urls: Urls
)

data class Urls(
    val regular: String
)


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\di\appModule.kt
File Name: appModule.kt
File Type: .kt
Contents:
package com.dogshare.di

import com.dogshare.repository.PreferencesRepository
import com.dogshare.repository.UserRepository
import com.dogshare.services.AuthService
import com.dogshare.viewmodels.CreateAccountViewModel
import com.dogshare.viewmodels.LoginViewModel
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import org.koin.dsl.module
import org.koin.androidx.viewmodel.dsl.viewModel

val appModule = module {
    single { FirebaseAuth.getInstance() }
    single { FirebaseFirestore.getInstance() }

    // PreferencesRepository definition
    single { PreferencesRepository(get())}

    // UserRepository definition (add this line)
    single { UserRepository() }

    // AuthService definition
    single { AuthService(get()) }

    // ViewModels
    viewModel { CreateAccountViewModel(get(), get()) }
    viewModel { LoginViewModel(get(), get()) }
}


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\di\viewModelModule.kt
File Name: viewModelModule.kt
File Type: .kt
Contents:
// File: viewModelModule.kt
package com.dogshare.di

import com.dogshare.repository.PreferencesRepository
import com.dogshare.viewmodels.MainViewModel
import com.dogshare.viewmodels.SettingsViewModel
import com.dogshare.viewmodels.ProfileViewModel
import com.dogshare.viewmodels.LogoutViewModel
import com.dogshare.viewmodels.CreateAccountViewModel
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import org.koin.androidx.viewmodel.dsl.viewModel
import org.koin.dsl.module

val viewModelModule = module {
    // Provide FirebaseAuth instance
    single { FirebaseAuth.getInstance() }

    // Provide Firebase Firestore instance
    single { FirebaseFirestore.getInstance() }

    // Provide PreferencesRepository with Context and Firebase Firestore as dependencies
    single { PreferencesRepository(get())}

    // Provide MainViewModel with FirebaseAuth as a dependency
    viewModel { MainViewModel(get()) }

    // Provide SettingsViewModel with PreferencesRepository as a dependency
    viewModel { SettingsViewModel(get()) }

    // Provide ProfileViewModel for ProfileScreen
    viewModel { ProfileViewModel() }

    // Provide LogoutViewModel for handling logout
    viewModel { LogoutViewModel(get()) }

    // Provide CreateAccountViewModel with PreferencesRepository and FirebaseAuth as dependencies
    viewModel { CreateAccountViewModel(get(), get()) }
}

File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\models\DogProfile.kt
File Name: DogProfile.kt
File Type: .kt
Contents:
package com.dogshare.models

data class DogProfile(
    val name: String,
    val age: Int,
    val breed: String,
    val imageUrl: String // URL of the dog's image
)


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\models\UserSettings.kt
File Name: UserSettings.kt
File Type: .kt
Contents:
package com.dogshare.models

data class UserSettings(
    val notificationsEnabled: Boolean = false,
    val darkModeEnabled: Boolean = false,
    val accountPrivacyEnabled: Boolean = false
)

File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\navigation\AppNavigation.kt
File Name: AppNavigation.kt
File Type: .kt
Contents:
package com.dogshare.navigation

import android.util.Log
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import com.dogshare.ui.screens.*

@Composable
fun AppNavigation(
    navController: NavHostController,
    startDestination: String,
    onGoogleSignIn: () -> Unit,
    modifier: Modifier = Modifier
) {
    Log.d("Navigation", "Start destination set to: $startDestination")

    NavHost(
        navController = navController,
        startDestination = startDestination,
        modifier = modifier
    ) {
        composable(NavigationRoutes.Login.route) {
            LoginScreen(
                navController = navController,
                onGoogleSignIn = onGoogleSignIn,
                onCreateAccount = {
                    navController.navigate(NavigationRoutes.CreateAccount.route)
                },
                onLoginSuccess = { userId ->
                    navController.navigate(NavigationRoutes.LandingPage.createRoute(userId)) {
                        popUpTo(NavigationRoutes.Login.route) { inclusive = true }
                    }
                },
                onLoginFailed = {
                    navController.navigate(NavigationRoutes.LoginFailed.route)
                },
                onForgotPassword = {
                    navController.navigate(NavigationRoutes.ForgotPassword.route)
                }
            )
        }

        composable(NavigationRoutes.ForgotPassword.route) {
            ForgotPasswordScreen(
                onPasswordReset = {
                    navController.navigate(NavigationRoutes.Login.route)
                },
                onResetFailed = { /* Handling of password reset failure */ },
                onBackToLogin = {
                    navController.navigateUp()
                }
            )
        }

        composable(NavigationRoutes.LandingPage.route) { backStackEntry ->
            val userId = backStackEntry.arguments?.getString("userId")
            if (userId == null) {
                Log.e("NavigationError", "UserId is null on app restart. Navigating to Login.")
                navController.navigate(NavigationRoutes.Login.route) {
                    popUpTo(NavigationRoutes.LandingPage.route) { inclusive = true }
                }
            } else {
                LandingPageScreen(
                    userId = userId,
                    navController = navController,
                    onLogout = {
                        navController.navigate(NavigationRoutes.Login.route) {
                            popUpTo(NavigationRoutes.LandingPage.route) { inclusive = true }
                        }
                    }
                )
            }
        }

        composable(NavigationRoutes.Settings.route) { backStackEntry ->
            val userId = backStackEntry.arguments?.getString("userId") ?: ""
            SettingsScreen(userId = userId, navController = navController)
        }

        composable(NavigationRoutes.Matches.route) { backStackEntry ->
            val userId = backStackEntry.arguments?.getString("userId") ?: ""
            MatchesScreen(userId = userId, navController = navController, matches = listOf("Match1", "Match2")) { match ->
                // Handle match selected logic
            }
        }

        composable(NavigationRoutes.Profile.route) { backStackEntry ->
            val userId = backStackEntry.arguments?.getString("userId") ?: ""
            ProfileScreen(userId = userId, navController = navController)
        }

        composable(NavigationRoutes.CreateAccount.route) {
            CreateAccountScreen(
                onLoginInstead = {
                    navController.navigate(NavigationRoutes.Login.route) {
                        popUpTo(NavigationRoutes.CreateAccount.route) { inclusive = true }
                    }
                },
                navController = navController
            )
        }

        composable(NavigationRoutes.LoginFailed.route) {
            LoginFailedScreen(
                onRetryLogin = { navController.navigate(NavigationRoutes.Login.route) },
                onForgotPassword = { navController.navigate(NavigationRoutes.ForgotPassword.route) }
            )
        }
    }
}


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\navigation\NavigationRoutes.kt
File Name: NavigationRoutes.kt
File Type: .kt
Contents:
package com.dogshare.navigation

sealed class NavigationRoutes(val route: String) {
    object Login : NavigationRoutes("login")
    object LandingPage : NavigationRoutes("landingPage/{userId}") {
        fun createRoute(userId: String) = "landingPage/$userId"
    }
    object Settings : NavigationRoutes("settings/{userId}") {
        fun createRoute(userId: String) = "settings/$userId"
    }
    object Matches : NavigationRoutes("matches/{userId}") {
        fun createRoute(userId: String) = "matches/$userId"
    }
    object Profile : NavigationRoutes("profile/{userId}") {
        fun createRoute(userId: String) = "profile/$userId"
    }
    object ForgotPassword : NavigationRoutes("forgotPassword")
    object CreateAccount : NavigationRoutes("createAccount")
    object LoginFailed : NavigationRoutes("loginFailed")
    object GoogleSignIn : NavigationRoutes("googleSignIn")
}


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\network\RetrofitClient.kt
File Name: RetrofitClient.kt
File Type: .kt
Contents:
package com.dogshare.network

import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

object RetrofitClient {
    private const val BASE_URL = "https://api.unsplash.com/"

    fun getClient(): UnsplashApi {
        return Retrofit.Builder()
            .baseUrl(BASE_URL)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
            .create(UnsplashApi::class.java)
    }
}


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\repository\PreferencesRepository.kt
File Name: PreferencesRepository.kt
File Type: .kt
Contents:
package com.dogshare.repository

import android.content.Context
import android.content.SharedPreferences
import android.util.Log
import androidx.security.crypto.EncryptedSharedPreferences
import androidx.security.crypto.MasterKey

class PreferencesRepository(context: Context) {

    companion object {
        private const val PREFS_NAME = "app_preferences"
        private const val KEY_NOTIFICATIONS_ENABLED = "notifications_enabled"
        private const val KEY_DARK_MODE_ENABLED = "dark_mode_enabled"
        private const val KEY_ACCOUNT_PRIVACY_ENABLED = "account_privacy_enabled"
        private const val KEY_USER_ID = "user_id"
        private const val PROMPT_LOGIN_KEY = "prompt_login"
        private const val LAST_LOGIN_TIMESTAMP_KEY = "last_login_timestamp"
    }

    // Initialize encrypted SharedPreferences
    private val masterKey = MasterKey.Builder(context)
        .setKeyScheme(MasterKey.KeyScheme.AES256_GCM)
        .build()

    private val sharedPreferences: SharedPreferences = EncryptedSharedPreferences.create(
        context,
        PREFS_NAME,
        masterKey,
        EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,
        EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM
    )

    // Getters for preferences
    fun getPromptLogin(): Boolean = sharedPreferences.getBoolean(PROMPT_LOGIN_KEY, true)
    fun getLastLoginTimestamp(): Long = sharedPreferences.getLong(LAST_LOGIN_TIMESTAMP_KEY, 0L)

    fun getUserId(): String? {
        val userId = sharedPreferences.getString(KEY_USER_ID, null)
        Log.d("PreferencesRepository", "Retrieved userId: $userId") // Log statement
        return userId
    }

    // Setters for preferences
    fun setPromptLogin(prompt: Boolean) {
        sharedPreferences.edit().putBoolean(PROMPT_LOGIN_KEY, prompt).apply()
    }

    fun updateLastLoginTimestamp() {
        val timestamp = System.currentTimeMillis()
        sharedPreferences.edit().putLong(LAST_LOGIN_TIMESTAMP_KEY, timestamp).apply()
        Log.d("PreferencesRepository", "Updated last login timestamp: $timestamp")
    }

    fun setUserId(userId: String) {
        sharedPreferences.edit().putString(KEY_USER_ID, userId).apply()
        updateLastLoginTimestamp()
        Log.d("PreferencesRepository", "UserId set: $userId") // Log statement
    }

    // Clear user preferences on logout
    fun clearUserId() {
        sharedPreferences.edit().remove(KEY_USER_ID).apply()
        setPromptLogin(true)  // Ensure prompt login is set after clearing user ID
        Log.d("PreferencesRepository", "Cleared userId")
    }

    // Additional preference methods like Notifications, DarkMode, etc.
    fun getNotificationsEnabled(): Boolean {
        return sharedPreferences.getBoolean(KEY_NOTIFICATIONS_ENABLED, false)
    }

    fun setNotificationsEnabled(value: Boolean) {
        sharedPreferences.edit().putBoolean(KEY_NOTIFICATIONS_ENABLED, value).apply()
    }

    fun getDarkModeEnabled(): Boolean {
        return sharedPreferences.getBoolean(KEY_DARK_MODE_ENABLED, false)
    }

    fun setDarkModeEnabled(value: Boolean) {
        sharedPreferences.edit().putBoolean(KEY_DARK_MODE_ENABLED, value).apply()
    }

    fun getAccountPrivacyEnabled(): Boolean {
        return sharedPreferences.getBoolean(KEY_ACCOUNT_PRIVACY_ENABLED, false)
    }

    fun setAccountPrivacyEnabled(value: Boolean) {
        sharedPreferences.edit().putBoolean(KEY_ACCOUNT_PRIVACY_ENABLED, value).apply()
    }
}


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\repository\UserRepository.kt
File Name: UserRepository.kt
File Type: .kt
Contents:
package com.dogshare.repository

import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.FirebaseUser

class UserRepository {
    private val firebaseAuth: FirebaseAuth = FirebaseAuth.getInstance()

    // Check if the user is authenticated and session is not expired
    fun isUserAuthenticated(): Boolean {
        val user = firebaseAuth.currentUser
        return user != null && !isSessionExpired(user)
    }

    private fun isSessionExpired(user: FirebaseUser): Boolean {
        val lastSignInTimestamp = user.metadata?.lastSignInTimestamp ?: return true
        val currentTime = System.currentTimeMillis()
        val daysSinceLastLogin = (currentTime - lastSignInTimestamp) / (1000 * 60 * 60 * 24)

        // Assume session expires if the user hasn't logged in within 30 days
        return daysSinceLastLogin > 30
    }

    fun signOutUser() {
        firebaseAuth.signOut()
    }

    // Auto sign-in logic: Check if token is valid, refresh token if necessary
    fun signInAutomatically(onSuccess: (FirebaseUser) -> Unit, onFailure: () -> Unit) {
        val currentUser = firebaseAuth.currentUser
        currentUser?.getIdToken(true)?.addOnCompleteListener { task ->
            if (task.isSuccessful) {
                // Token is valid, return the current user
                onSuccess(currentUser)
            } else {
                // Token is invalid or session expired, force sign out
                signOutUser()
                onFailure()
            }
        } ?: onFailure()
    }
}


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\services\AuthServices.kt
File Name: AuthServices.kt
File Type: .kt
Contents:
package com.dogshare.services

import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.FirebaseAuthUserCollisionException
import kotlinx.coroutines.tasks.await

class AuthService(private val auth: FirebaseAuth) {

    suspend fun signIn(email: String, password: String): Result<String> {
        return try {
            auth.signInWithEmailAndPassword(email, password).await()
            Result.success(auth.currentUser?.uid ?: "Unknown User ID")
        } catch (e: Exception) {
            Result.failure(e)
        }
    }

    suspend fun createAccount(email: String, password: String): Result<String> {
        return try {
            auth.createUserWithEmailAndPassword(email, password).await()
            Result.success(auth.currentUser?.uid ?: "Unknown User ID")
        } catch (e: FirebaseAuthUserCollisionException) {
            Result.failure(Exception("Account already exists with a different password."))
        } catch (e: Exception) {
            Result.failure(e)
        }
    }
}

File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\MainActivity.kt
File Name: MainActivity.kt
File Type: .kt
Contents:
package com.dogshare.ui

import android.content.Intent
import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.lifecycle.lifecycleScope
import androidx.navigation.compose.rememberNavController
import com.dogshare.navigation.AppNavigation
import com.dogshare.navigation.NavigationRoutes
import com.dogshare.repository.PreferencesRepository
import com.dogshare.ui.theme.DogShareTheme
import com.google.android.gms.auth.api.signin.GoogleSignIn
import com.google.android.gms.auth.api.signin.GoogleSignIn.getSignedInAccountFromIntent
import com.google.android.gms.auth.api.signin.GoogleSignInAccount
import com.google.android.gms.auth.api.signin.GoogleSignInOptions
import com.google.android.gms.common.api.ApiException
import com.google.firebase.FirebaseApp
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.GoogleAuthProvider
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import org.koin.android.ext.android.inject
import com.dogshare.R

class MainActivity : ComponentActivity() {
    private val preferencesRepository: PreferencesRepository by inject()
    private lateinit var auth: FirebaseAuth

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // Initialize Firebase
        FirebaseApp.initializeApp(this)
        auth = FirebaseAuth.getInstance()

        setContent {
            DogShareTheme {
                DogShareApp(preferencesRepository, onGoogleSignIn = { startGoogleSignIn() })
            }
        }
    }

    // Set up Google Sign-In
    private val signInLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
        val task = getSignedInAccountFromIntent(result.data)
        try {
            val account = task.getResult(ApiException::class.java)
            account?.let { firebaseAuthWithGoogle(it) }
        } catch (e: ApiException) {
            Log.e("MainActivity", "Google sign-in failed", e)
        }
    }

    private fun startGoogleSignIn() {
        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
            .requestIdToken(getString(R.string.default_web_client_id))
            .requestEmail()
            .build()

        val signInClient = GoogleSignIn.getClient(this, gso)
        signInLauncher.launch(signInClient.signInIntent)
    }

    private fun firebaseAuthWithGoogle(account: GoogleSignInAccount) {
        val credential = GoogleAuthProvider.getCredential(account.idToken, null)
        lifecycleScope.launch {
            auth.signInWithCredential(credential).addOnCompleteListener { task ->
                if (task.isSuccessful) {
                    val user = auth.currentUser
                    user?.let {
                        Log.d("MainActivity", "Sign-in successful: ${it.displayName}")
                        preferencesRepository.setUserId(user.uid)
                        preferencesRepository.updateLastLoginTimestamp()
                    }
                } else {
                    Log.e("MainActivity", "Authentication failed", task.exception)
                }
            }
        }
    }
}

@Composable
fun DogShareApp(preferencesRepository: PreferencesRepository, onGoogleSignIn: () -> Unit) {
    val navController = rememberNavController()
    var startDestination by remember { mutableStateOf<String?>(null) }
    var isLoading by remember { mutableStateOf(true) }

    // Perform the login check in a coroutine to avoid blocking the UI
    LaunchedEffect(Unit) {
        val firebaseUser = FirebaseAuth.getInstance().currentUser
        val storedUserId = preferencesRepository.getUserId()

        Log.d("MainActivity", "Stored userId: $storedUserId")

        if (firebaseUser != null && storedUserId != null) {
            startDestination = NavigationRoutes.LandingPage.createRoute(storedUserId)
        } else {
            startDestination = NavigationRoutes.Login.route
        }

        isLoading = false
    }

    if (isLoading) {
        CircularProgressIndicator(modifier = Modifier.fillMaxSize())
    } else {
        startDestination?.let {
            AppNavigation(navController = navController, startDestination = it, onGoogleSignIn = onGoogleSignIn)
        }
    }
}


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\components\BottomNavigationBar.kt
File Name: BottomNavigationBar.kt
File Type: .kt
Contents:
package com.dogshare.ui.components

import android.util.Log
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.AccountCircle
import androidx.compose.material.icons.filled.Favorite
import androidx.compose.material.icons.filled.Home
import androidx.compose.material.icons.filled.Settings
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.navigation.NavController
import androidx.navigation.compose.currentBackStackEntryAsState
import com.dogshare.navigation.NavigationRoutes

@Composable
fun BottomNavigationBar(navController: NavController, userId: String) {
    val items = listOf(
        BottomNavItem(NavigationRoutes.LandingPage.createRoute(userId), Icons.Default.Home, "Home"),
        BottomNavItem(NavigationRoutes.Matches.createRoute(userId), Icons.Default.Favorite, "Matches"),
        BottomNavItem(NavigationRoutes.Settings.createRoute(userId), Icons.Default.Settings, "Settings"),
        BottomNavItem(NavigationRoutes.Profile.createRoute(userId), Icons.Default.AccountCircle, "Profile")
    )

    NavigationBar {
        val navBackStackEntry by navController.currentBackStackEntryAsState()
        val currentRoute = navBackStackEntry?.destination?.route

        items.forEach { item ->
            NavigationBarItem(
                icon = {
                    Icon(
                        imageVector = item.icon,
                        contentDescription = item.label,
                        tint = if (currentRoute == item.route) MaterialTheme.colorScheme.primary else Color.Gray
                    )
                },
                label = {
                    Text(
                        text = item.label,
                        color = if (currentRoute == item.route) MaterialTheme.colorScheme.primary else Color.Gray
                    )
                },
                selected = currentRoute == item.route,
                onClick = {
                    Log.d("BottomNavigationBar", "Button clicked: ${item.label}")
                    Log.d("BottomNavigationBar", "Current route: $currentRoute")
                    Log.d("BottomNavigationBar", "Navigating to: ${item.route}")
                    if (currentRoute != item.route) {
                        navController.navigate(item.route) {
                            popUpTo(navController.graph.startDestinationId) {
                                saveState = true
                            }
                            launchSingleTop = true
                            restoreState = true
                        }
                    }
                },
                alwaysShowLabel = true
            )
        }
    }
}

data class BottomNavItem(val route: String, val icon: ImageVector, val label: String)


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\components\showToast.kt
File Name: showToast.kt
File Type: .kt
Contents:
package com.dogshare.ui.components

import android.content.Context
import android.widget.Toast

object ToastUtils {
    // Function to show a toast with a default short duration
    fun showToast(context: Context, message: String) {
        Toast.makeText(context, message, Toast.LENGTH_SHORT).show()
    }

    // Function to show a toast with a custom duration (either Toast.LENGTH_SHORT or Toast.LENGTH_LONG)
    fun showToast(context: Context, message: String, duration: Int) {
        Toast.makeText(context, message, duration).show()
    }
}


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\components\SwipeableCard.kt
File Name: SwipeableCard.kt
File Type: .kt
Contents:
package com.dogshare.ui.components

import android.Manifest
import android.content.Context
import android.content.pm.PackageManager
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.animation.core.Animatable
import androidx.compose.animation.core.tween
import androidx.compose.foundation.gestures.detectDragGestures
import androidx.compose.foundation.layout.Box
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.layout.layout
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.platform.LocalContext
import androidx.core.app.ActivityCompat
import com.dogshare.models.DogProfile
import com.google.android.gms.location.FusedLocationProviderClient
import com.google.android.gms.location.LocationServices
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.launch
import kotlin.math.roundToInt

// Enum for swipe directions
enum class Direction { LEFT, RIGHT, UP, DOWN }

// SwipeableCard Composable function
@Composable
fun SwipeableCard(
    userId: String,
    DogProfile: List<String>, // List of dog photo URLs
    currentPhotoIndex: Int,  // Index of the current photo
    state: SwipeableCardState = rememberSwipeableCardState(),
    onSwipeComplete: (Direction) -> Unit,
    modifier: Modifier = Modifier,
    content: @Composable () -> Unit = {}
) {
    val context = LocalContext.current
    val fusedLocationClient = remember { LocationServices.getFusedLocationProviderClient(context) }
    val firestore = FirebaseFirestore.getInstance()
    val coroutineScope = rememberCoroutineScope()

    var firstSwipe by remember { mutableStateOf(true) }
    var location by remember { mutableStateOf<Pair<Double, Double>?>(null) }

    // Location permission launcher
    val locationPermissionLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.RequestPermission(),
        onResult = { granted ->
            if (granted) {
                captureLocation(context, fusedLocationClient) { lat, lon ->
                    location = Pair(lat, lon)
                    storeLocationInFirestore(userId, lat, lon, firestore)
                }
            } else {
                // Handle permission denied
                println("Location permission denied. Please grant the permission for enhanced experience.")
            }
        }
    )

    // Swipeable Card Logic with animation
    Box(
        modifier = modifier
            .pointerInput(Unit) {
                detectDragGestures(
                    onDragEnd = {
                        state.onDragEnd()
                        state.swipeDirection?.let { direction ->
                            // Ensure the first swipe captures location
                            if (firstSwipe) {
                                firstSwipe = false
                            }
                            // Store the swipe action in Firestore
                            coroutineScope.launch {
                                storeSwipeActionInFirestore(userId, DogProfile[currentPhotoIndex], direction, firestore)
                                // Animate swipe out and move to the next card
                                state.animateSwipeOut(direction)
                                onSwipeComplete(direction) // Notify that a swipe has occurred
                            }
                        }
                    },
                    onDrag = { _, dragAmount ->
                        coroutineScope.launch {
                            state.onDrag(dragAmount)  // Handle drag
                        }
                    }
                )
            }
            .layout { measurable, constraints ->
                val placeable = measurable.measure(constraints)
                layout(placeable.width, placeable.height) {
                    val offset = state.getOffset()
                    placeable.placeRelative(offset.x.roundToInt(), offset.y.roundToInt())
                }
            }
    ) {
        content()
    }
}

// SwipeableCardState to handle swipe behavior and animation
class SwipeableCardState {
    private var offsetX = Animatable(0f)
    private var offsetY = Animatable(0f)
    var swipeDirection: Direction? by mutableStateOf(null)

    // Handle dragging
    suspend fun onDrag(dragAmount: Offset) {
        offsetX.snapTo(offsetX.value + dragAmount.x)
        offsetY.snapTo(offsetY.value + dragAmount.y)
    }

    // Handle drag end and detect swipe direction
    fun onDragEnd() {
        swipeDirection = when {
            offsetX.value > 100 -> Direction.RIGHT
            offsetX.value < -100 -> Direction.LEFT
            offsetY.value > 100 -> Direction.DOWN
            offsetY.value < -100 -> Direction.UP
            else -> null
        }
    }

    // Animate swipe out of the screen
    suspend fun animateSwipeOut(direction: Direction) {
        val animationDuration = 300 // Duration of the animation in milliseconds
        when (direction) {
            Direction.LEFT -> offsetX.animateTo(-1000f, animationSpec = tween(durationMillis = animationDuration))
            Direction.RIGHT -> offsetX.animateTo(1000f, animationSpec = tween(durationMillis = animationDuration))
            Direction.UP -> offsetY.animateTo(-1000f, animationSpec = tween(durationMillis = animationDuration))
            Direction.DOWN -> offsetY.animateTo(1000f, animationSpec = tween(durationMillis = animationDuration))
        }
        // Reset offsets after animation completes
        resetOffsets()
    }

    // Reset offsets after a swipe or drag
    private suspend fun resetOffsets() {
        offsetX.animateTo(0f)
        offsetY.animateTo(0f)
    }

    fun getOffset(): Offset {
        return Offset(offsetX.value, offsetY.value)
    }
}

// Function to capture user location if permission is granted
fun captureLocation(context: Context, fusedLocationClient: FusedLocationProviderClient, onLocationCaptured: (Double, Double) -> Unit) {
    if (ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
        fusedLocationClient.lastLocation.addOnSuccessListener { location ->
            location?.let {
                onLocationCaptured(it.latitude, it.longitude)
            } ?: run {
                println("Failed to get location.")
            }
        }.addOnFailureListener {
            println("Location retrieval failed: ${it.message}")
        }
    } else {
        println("Location permission not granted.")
    }
}

// Function to store swipe action in Firestore
fun storeSwipeActionInFirestore(
    userId: String,
    dogPhotoUrl: String,
    direction: Direction,
    firestore: FirebaseFirestore
) {
    val swipeAction = hashMapOf(
        "photoUrl" to dogPhotoUrl,
        "direction" to direction.name,
        "timestamp" to System.currentTimeMillis()
    )

    // Use set() with a generated ID instead of add()
    firestore.collection("swipe_actions")
        .document(userId)
        .collection("actions")
        .document()  // Create a new document with a random ID
        .set(swipeAction)  // Using set() instead of add()
        .addOnSuccessListener {
            println("Swipe action stored successfully")
        }
        .addOnFailureListener { e ->
            println("Failed to store swipe action: ${e.message}")
        }
}


// Function to store location in Firestore
fun storeLocationInFirestore(userId: String, lat: Double, lon: Double, firestore: FirebaseFirestore) {
    val userLocation = hashMapOf(
        "latitude" to lat,
        "longitude" to lon,
        "timestamp" to System.currentTimeMillis()
    )

    firestore.collection("user_locations")
        .document(userId)
        .set(userLocation)
        .addOnSuccessListener {
            println("Location stored successfully")
        }
        .addOnFailureListener { e ->
            println("Failed to store location: ${e.message}")
        }
}

// Remember SwipeableCardState
@Composable
fun rememberSwipeableCardState(): SwipeableCardState {
    return remember { SwipeableCardState() }
}


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\composables\QuestionnaireSection.kt
File Name: QuestionnaireSection.kt
File Type: .kt
Contents:
package com.dogshare.ui.composables

import android.Manifest
import android.annotation.SuppressLint
import android.content.pm.PackageManager
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.core.app.ActivityCompat
import androidx.navigation.NavHostController
import com.google.android.gms.location.LocationServices
import com.google.firebase.firestore.FirebaseFirestore
import com.dogshare.ui.components.ToastUtils

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun QuestionnaireSection(
    userId: String,
    navController: NavHostController,
    onPreferencesSaved: () -> Unit
) {
    val db = FirebaseFirestore.getInstance()
    val context = LocalContext.current

    var experience by remember { mutableStateOf("") }
    var careFrequency by remember { mutableStateOf("") }
    var breedPreference by remember { mutableStateOf("") }
    var latitude by remember { mutableStateOf<Double?>(null) }
    var longitude by remember { mutableStateOf<Double?>(null) }

    // Function to save preferences along with geolocation
    fun savePreferencesWithLocation() {
        if (latitude != null && longitude != null) {
            db.collection("user_preferences").document(userId).set(
                mapOf(
                    "Experience" to experience,
                    "Frequency" to careFrequency,
                    "Breed" to breedPreference,
                    "Latitude" to latitude,
                    "Longitude" to longitude
                )
            ).addOnSuccessListener {
                onPreferencesSaved()
                // Navigate to the SwipingSection after saving preferences
                navController.navigate("swiping/${userId}")
            }.addOnFailureListener {
                ToastUtils.showToast(context,"Failed to save preferences, please try again.")
            }
        } else {
            // Inform the user about unavailable location
            ToastUtils.showToast(context,"Location not available, please retry.")
        }
    }

    // Capture the user's location when the questionnaire is filled out for the first time
    @SuppressLint("MissingPermission")
    fun captureLocation() {
        val fusedLocationClient = LocationServices.getFusedLocationProviderClient(context)
        fusedLocationClient.lastLocation
            .addOnSuccessListener { location ->
                location?.let {
                    latitude = it.latitude
                    longitude = it.longitude
                }
            }
            .addOnFailureListener {
                // Handle the failure case, e.g., show an error message or retry
            }
    }

    // Launcher to request location permission
    val locationPermissionLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.RequestMultiplePermissions()
    ) { permissions ->
        val granted = permissions[Manifest.permission.ACCESS_FINE_LOCATION] ?: false
        if (granted) {
            // Permission is granted, capture the location
            captureLocation()
        } else {
            // Handle the case where the permission is denied
            // Show a message or navigate away
        }
    }

    // Call captureLocation when the composable is first loaded
    LaunchedEffect(Unit) {
        if (ActivityCompat.checkSelfPermission(
                context,
                Manifest.permission.ACCESS_FINE_LOCATION
            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                context,
                Manifest.permission.ACCESS_COARSE_LOCATION
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            // Request the missing permissions
            locationPermissionLauncher.launch(
                arrayOf(
                    Manifest.permission.ACCESS_FINE_LOCATION,
                    Manifest.permission.ACCESS_COARSE_LOCATION
                )
            )
        } else {
            // Permissions are already granted, capture the location
            captureLocation()
        }
    }

    Column(modifier = Modifier.padding(16.dp)) {
        Text("What’s your experience with dogs?")
        TextField(
            value = experience,
            onValueChange = { experience = it },
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp)
        )

        Text("How often can you care for a dog?")
        TextField(
            value = careFrequency,
            onValueChange = { careFrequency = it },
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp)
        )

        Text("Do you have any breed preferences?")
        TextField(
            value = breedPreference,
            onValueChange = { breedPreference = it },
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 16.dp)
        )

        Button(
            onClick = { savePreferencesWithLocation() },
            modifier = Modifier
                .fillMaxWidth()
                .padding(top = 20.dp)
        ) {
            Text("Save Preferences")
        }
    }
}

File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\composables\SettingItemToggle.kt
File Name: SettingItemToggle.kt
File Type: .kt
Contents:
package com.dogshare.ui.components

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp

@Composable
fun SettingItemToggle(
    settingKey: String,
    settingLabel: String,
    isChecked: Boolean,
    onSettingChanged: (String, Boolean) -> Unit
) {
    Row(
        modifier = Modifier.fillMaxWidth(),
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        Text(text = settingLabel)
        Switch(
            checked = isChecked,
            onCheckedChange = { isChecked ->
                onSettingChanged(settingKey, isChecked)
            }
        )
    }
}

File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\screens\CreateAccountScreen.kt
File Name: CreateAccountScreen.kt
File Type: .kt
Contents:
package com.dogshare.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.dogshare.viewmodels.CreateAccountViewModel
import org.koin.androidx.compose.koinViewModel

@Composable
fun CreateAccountScreen(
    navController: NavController,
    onLoginInstead: () -> Unit,
    viewModel: CreateAccountViewModel = koinViewModel()  // Using koinViewModel for Koin dependency injection
) {
    val email by remember { viewModel.email }
    val password by remember { viewModel.password }
    val confirmPassword by remember { viewModel.confirmPassword }
    val isLoading by viewModel.isLoading.collectAsState()
    val createAccountState by viewModel.createAccountState.collectAsState()

    Scaffold { paddingValues ->
        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues),
            contentAlignment = Alignment.Center
        ) {
            if (isLoading) {
                CircularProgressIndicator()
            } else {
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    OutlinedTextField(
                        value = email,
                        onValueChange = { viewModel.updateEmail(it) },
                        label = { Text("Email") },
                        singleLine = true,
                        keyboardOptions = KeyboardOptions.Default.copy(
                            imeAction = ImeAction.Next,
                            keyboardType = KeyboardType.Email
                        ),
                        modifier = Modifier.fillMaxWidth()
                    )

                    Spacer(modifier = Modifier.height(8.dp))

                    OutlinedTextField(
                        value = password,
                        onValueChange = { viewModel.updatePassword(it) },
                        label = { Text("Password") },
                        singleLine = true,
                        keyboardOptions = KeyboardOptions.Default.copy(
                            imeAction = ImeAction.Next,
                            keyboardType = KeyboardType.Password
                        ),
                        modifier = Modifier.fillMaxWidth()
                    )

                    Spacer(modifier = Modifier.height(8.dp))

                    OutlinedTextField(
                        value = confirmPassword,
                        onValueChange = { viewModel.updateConfirmPassword(it) },
                        label = { Text("Confirm Password") },
                        singleLine = true,
                        keyboardOptions = KeyboardOptions.Default.copy(
                            imeAction = ImeAction.Done,
                            keyboardType = KeyboardType.Password
                        ),
                        modifier = Modifier.fillMaxWidth()
                    )

                    Spacer(modifier = Modifier.height(16.dp))

                    Button(
                        onClick = {
                            viewModel.createAccount()
                        },
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Text("Create Account")
                    }

                    if (createAccountState.isNotEmpty()) {
                        Text(
                            text = createAccountState,
                            style = MaterialTheme.typography.bodyMedium,
                            color = if (createAccountState.contains("successfully", ignoreCase = true)) {
                                MaterialTheme.colorScheme.primary
                            } else {
                                MaterialTheme.colorScheme.error
                            },
                            modifier = Modifier.padding(top = 16.dp)
                        )
                    }

                    Spacer(modifier = Modifier.height(16.dp))

                    TextButton(onClick = onLoginInstead) {
                        Text("Already have an account? Log in")
                    }
                }
            }
        }
    }
}

File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\screens\ForgotPasswordScreen.kt
File Name: ForgotPasswordScreen.kt
File Type: .kt
Contents:
package com.dogshare.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import com.google.firebase.auth.FirebaseAuth

@Composable
fun ForgotPasswordScreen(
    onPasswordReset: () -> Unit,
    onResetFailed: (String) -> Unit,
    onBackToLogin: () -> Unit
) {
    var email by remember { mutableStateOf("") }
    var isLoading by remember { mutableStateOf(false) }
    var errorMessage by remember { mutableStateOf<String?>(null) }
    val context = LocalContext.current

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(text = "Reset Password", style = MaterialTheme.typography.headlineSmall)

        Spacer(modifier = Modifier.height(16.dp))

        TextField(
            value = email,
            onValueChange = { email = it },
            label = { Text("Email") },
            modifier = Modifier.fillMaxWidth(),
            singleLine = true
        )

        Spacer(modifier = Modifier.height(16.dp))

        errorMessage?.let {
            Text(
                text = it,
                color = MaterialTheme.colorScheme.error,
                style = MaterialTheme.typography.bodyMedium,
                modifier = Modifier.padding(bottom = 16.dp)
            )
        }

        Button(
            onClick = {
                isLoading = true
                FirebaseAuth.getInstance().sendPasswordResetEmail(email)
                    .addOnCompleteListener { task ->
                        isLoading = false
                        if (task.isSuccessful) {
                            onPasswordReset()
                        } else {
                            errorMessage = task.exception?.message ?: "Failed to send reset email"
                            onResetFailed(errorMessage!!)
                        }
                    }
            },
            enabled = !isLoading,
            modifier = Modifier.fillMaxWidth()
        ) {
            if (isLoading) {
                CircularProgressIndicator(
                    modifier = Modifier.size(24.dp),
                    color = MaterialTheme.colorScheme.onPrimary
                )
            } else {
                Text(text = "Reset Password")
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        TextButton(onClick = onBackToLogin) {
            Text(text = "Back to Login")
        }
    }
}

File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\screens\LandingPageScreen.kt
File Name: LandingPageScreen.kt
File Type: .kt
Contents:
package com.dogshare.ui.screens

import android.util.Log
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.navigation.NavController
import com.dogshare.navigation.NavigationRoutes
import com.dogshare.ui.components.BottomNavigationBar

@Composable
fun LandingPageScreen(
    userId: String?,
    navController: NavController,
    onLogout: () -> Unit
) {
    // Log userId to debug navigation issues
    Log.d("LandingPageScreen", "User ID: $userId")

    userId?.let {
        Scaffold(
            bottomBar = {
                BottomNavigationBar(navController = navController, userId = it)
            }
        ) { innerPadding ->
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(innerPadding),
                contentAlignment = Alignment.Center
            ) {
                SwipingScreen(userId = userId)  // Embedded swiping screen within the LandingPageScreen
            }
        }
    } ?: run {
        // Redirect to login if userId is null
        Log.d("LandingPageScreen", "User ID is null, navigating to Login Screen")
        navController.navigate(NavigationRoutes.Login.route) {
            popUpTo(NavigationRoutes.LandingPage.route) { inclusive = true }
        }
    }
}


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\screens\LoginFailedScreen.kt
File Name: LoginFailedScreen.kt
File Type: .kt
Contents:
package com.dogshare.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp

@Composable
fun LoginFailedScreen(
    onRetryLogin: () -> Unit,
    onForgotPassword: () -> Unit
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(text = "Login Failed", style = MaterialTheme.typography.headlineSmall)

        Spacer(modifier = Modifier.height(16.dp))

        Text(text = "Please check your credentials and try again.")

        Spacer(modifier = Modifier.height(16.dp))

        Button(
            onClick = onRetryLogin,
            modifier = Modifier.fillMaxWidth()
        ) {
            Text(text = "Retry Login")
        }

        Spacer(modifier = Modifier.height(16.dp))

        TextButton(onClick = onForgotPassword) {
            Text(text = "Forgot Password?")
        }
    }
}


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\screens\LoginScreen.kt
File Name: LoginScreen.kt
File Type: .kt
Contents:
package com.dogshare.ui.screens

import android.util.Log
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.unit.dp
import com.dogshare.repository.PreferencesRepository
import com.google.firebase.auth.FirebaseAuth
import org.koin.java.KoinJavaComponent.inject
import androidx.navigation.NavController
import com.dogshare.navigation.NavigationRoutes

@Composable
fun LoginScreen(
    navController: NavController,
    onGoogleSignIn: () -> Unit,    // Google Sign-In callback
    onCreateAccount: () -> Unit,
    onLoginSuccess: (String) -> Unit,
    onLoginFailed: (String) -> Unit,
    onForgotPassword: () -> Unit
) {
    var email by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }
    var loginErrorMessage by remember { mutableStateOf<String?>(null) }
    var isLoading by remember { mutableStateOf(false) }

    val preferencesRepository: PreferencesRepository by inject(PreferencesRepository::class.java)

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(text = "Login", style = MaterialTheme.typography.headlineSmall)

        Spacer(modifier = Modifier.height(16.dp))

        TextField(
            value = email,
            onValueChange = { email = it },
            label = { Text("Email") },
            modifier = Modifier.fillMaxWidth(),
            singleLine = true
        )

        Spacer(modifier = Modifier.height(8.dp))

        TextField(
            value = password,
            onValueChange = { password = it },
            label = { Text("Password") },
            modifier = Modifier.fillMaxWidth(),
            singleLine = true,
            visualTransformation = PasswordVisualTransformation()
        )

        Spacer(modifier = Modifier.height(16.dp))

        loginErrorMessage?.let {
            Text(
                text = it,
                color = MaterialTheme.colorScheme.error,
                style = MaterialTheme.typography.bodyMedium,
                modifier = Modifier.padding(bottom = 16.dp)
            )
        }

        Button(
            onClick = {
                isLoading = true
                performLogin(
                    email = email,
                    password = password,
                    preferencesRepository = preferencesRepository,
                    onLoginSuccess = { userId ->
                        isLoading = false
                        onLoginSuccess(userId)
                    },
                    onLoginFailed = { error ->
                        isLoading = false
                        loginErrorMessage = error
                        onLoginFailed(error)
                    }
                )
            },
            enabled = !isLoading,
            modifier = Modifier.fillMaxWidth()
        ) {
            if (isLoading) {
                CircularProgressIndicator(
                    modifier = Modifier.size(24.dp),
                    color = MaterialTheme.colorScheme.onPrimary
                )
            } else {
                Text(text = "Log In")
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        // Google Sign-In Button
        Button(
            onClick = {
                onGoogleSignIn()   // Trigger Google Sign-In
            },
            modifier = Modifier.fillMaxWidth()
        ) {
            Text(text = "Sign in with Google")
        }

        Spacer(modifier = Modifier.height(16.dp))

        TextButton(onClick = {
            navController.navigate(NavigationRoutes.ForgotPassword.route)
        }) {
            Text("Forgot Password?")
        }

        Spacer(modifier = Modifier.height(8.dp))

        TextButton(onClick = onCreateAccount) {
            Text("Create Account")
        }
    }
}

private fun performLogin(
    email: String,
    password: String,
    preferencesRepository: PreferencesRepository,
    onLoginSuccess: (String) -> Unit,
    onLoginFailed: (String) -> Unit
) {
    val auth = FirebaseAuth.getInstance()
    if (email.isNotBlank() && password.isNotBlank()) {
        auth.signInWithEmailAndPassword(email, password)
            .addOnCompleteListener { task ->
                if (task.isSuccessful) {
                    val userId = auth.currentUser?.uid
                    if (userId != null) {
                        preferencesRepository.setUserId(userId)
                        preferencesRepository.updateLastLoginTimestamp()
                        onLoginSuccess(userId)
                    } else {
                        onLoginFailed("Failed to retrieve user ID")
                    }
                } else {
                    onLoginFailed(task.exception?.message ?: "Authentication failed")
                }
            }
    } else {
        onLoginFailed("Email or password cannot be empty")
    }
}

File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\screens\MatchesScreen.kt
File Name: MatchesScreen.kt
File Type: .kt
Contents:
package com.dogshare.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.dogshare.ui.components.BottomNavigationBar

@Composable
fun MatchesScreen(
    userId: String,
    navController: NavController,
    matches: List<String>,  // Replace String with your Match data model
    onMatchSelected: (String) -> Unit
) {
    Scaffold(
        bottomBar = {
            BottomNavigationBar(navController = navController, userId = userId)
        }
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(innerPadding)
                .padding(16.dp),
            verticalArrangement = Arrangement.Top,
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(text = "Your Matches", style = MaterialTheme.typography.headlineSmall)

            Spacer(modifier = Modifier.height(16.dp))

            LazyColumn {
                items(matches) { match ->
                    MatchItem(match = match, onMatchSelected = onMatchSelected)
                    HorizontalDivider(modifier = Modifier.padding(vertical = 8.dp))
                }
            }
        }
    }
}

@Composable
fun MatchItem(match: String, onMatchSelected: (String) -> Unit) {
    TextButton(
        onClick = {
            // Navigate to a match detail screen or handle match selection logic
            onMatchSelected(match)
        },
        modifier = Modifier.fillMaxWidth()
    ) {
        Text(text = match)  // Customize to display match details
    }
}


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\screens\ProfileScreen.kt
File Name: ProfileScreen.kt
File Type: .kt
Contents:
package com.dogshare.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.dogshare.viewmodels.LogoutViewModel
import com.dogshare.viewmodels.ProfileViewModel
import org.koin.androidx.compose.koinViewModel
import com.dogshare.ui.components.BottomNavigationBar

@Composable
fun ProfileScreen(
    userId: String,
    navController: NavController,
    viewModel: ProfileViewModel = koinViewModel(),
    logoutViewModel: LogoutViewModel = koinViewModel()
) {
    val email by viewModel.email.collectAsState()
    val petType by viewModel.petType.collectAsState()
    val petSize by viewModel.petSize.collectAsState()
    val livingCondition by viewModel.livingCondition.collectAsState()
    val activityLevel by viewModel.activityLevel.collectAsState()
    val travelDistance by viewModel.travelDistance.collectAsState()
    val saveProfileState by viewModel.saveProfileState.collectAsState()
    val isLoading by viewModel.isLoading.collectAsState()

    LaunchedEffect(userId) {
        viewModel.fetchProfile(userId)
    }

    Scaffold(
        bottomBar = { BottomNavigationBar(navController = navController, userId = userId) }
    ) { innerPadding ->
        if (isLoading) {
            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                CircularProgressIndicator()
            }
        } else {
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(innerPadding)
                    .padding(16.dp),
                verticalArrangement = Arrangement.Center,
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(text = "Profile", style = MaterialTheme.typography.headlineSmall)
                Spacer(modifier = Modifier.height(16.dp))

                // Dynamic fields with save logic
                OutlinedTextField(
                    value = email,
                    onValueChange = { viewModel.updateEmail(it) },
                    label = { Text("Email") },
                    singleLine = true,
                    keyboardOptions = KeyboardOptions.Default.copy(imeAction = ImeAction.Done),
                    modifier = Modifier.fillMaxWidth()
                )
                OutlinedTextField(
                    value = petType,
                    onValueChange = { viewModel.updatePetType(it) },
                    label = { Text("Pet Type") },
                    modifier = Modifier.fillMaxWidth()
                )
                OutlinedTextField(
                    value = petSize,
                    onValueChange = { viewModel.updatePetSize(it) },
                    label = { Text("Pet Size") },
                    modifier = Modifier.fillMaxWidth()
                )
                OutlinedTextField(
                    value = livingCondition,
                    onValueChange = { viewModel.updateLivingCondition(it) },
                    label = { Text("Living Condition") },
                    modifier = Modifier.fillMaxWidth()
                )
                OutlinedTextField(
                    value = activityLevel,
                    onValueChange = { viewModel.updateActivityLevel(it) },
                    label = { Text("Activity Level") },
                    modifier = Modifier.fillMaxWidth()
                )
                OutlinedTextField(
                    value = travelDistance,
                    onValueChange = { viewModel.updateTravelDistance(it) },
                    label = { Text("Travel Distance") },
                    modifier = Modifier.fillMaxWidth()
                )

                Spacer(modifier = Modifier.height(16.dp))

                Button(
                    onClick = {
                        viewModel.saveProfile(userId)
                    },
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Text("Save Profile")
                }

                if (saveProfileState.isNotEmpty()) {
                    Text(saveProfileState, color = MaterialTheme.colorScheme.error)
                }

                Spacer(modifier = Modifier.height(16.dp))

                Button(
                    onClick = {
                        logoutViewModel.logout {
                            navController.navigate("login") {
                                popUpTo(0) { inclusive = true }  // Clear back stack
                            }
                        }
                    },
                    modifier = Modifier.fillMaxWidth(),
                    colors = ButtonDefaults.buttonColors(MaterialTheme.colorScheme.error)
                ) {
                    Text("Log Out")
                }
            }
        }
    }
}


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\screens\SettingsScreen.kt
File Name: SettingsScreen.kt
File Type: .kt
Contents:
package com.dogshare.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.dogshare.ui.components.BottomNavigationBar
import com.dogshare.viewmodels.SettingsViewModel
import org.koin.androidx.compose.koinViewModel
import androidx.compose.ui.platform.LocalContext
import com.dogshare.ui.components.SettingItemToggle

@Composable
fun SettingsScreen(
    userId: String,
    navController: NavController
) {
    // Inject the SettingsViewModel using Koin
    val viewModel: SettingsViewModel = koinViewModel()

    // Get the current context
    val context = LocalContext.current

    // Load preferences when the screen is composed
    LaunchedEffect(context) {
        viewModel.loadPreferences() // Ensure preferences are loaded on composition
    }

    // Collect state values from the ViewModel
    val notificationsEnabled by viewModel.notificationsEnabled.collectAsState()
    val darkModeEnabled by viewModel.darkModeEnabled.collectAsState()
    val accountPrivacyEnabled by viewModel.accountPrivacyEnabled.collectAsState()

    // Scaffold for the Settings screen layout
    Scaffold(
        bottomBar = { BottomNavigationBar(navController = navController, userId = userId) }
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(innerPadding)
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            // Title of the Settings screen
            Text(text = "Settings", style = MaterialTheme.typography.headlineSmall)

            Spacer(modifier = Modifier.height(16.dp))

            // Toggle for Notifications setting
            SettingItemToggle(
                settingKey = "notifications",
                settingLabel = "Enable Notifications",
                isChecked = notificationsEnabled,
                onSettingChanged = { key, isEnabled ->
                    viewModel.updatePreference(key, isEnabled)
                }
            )

            Spacer(modifier = Modifier.height(16.dp))

            // Toggle for Dark Mode setting
            SettingItemToggle(
                settingKey = "dark_mode",
                settingLabel = "Enable Dark Mode",
                isChecked = darkModeEnabled,
                onSettingChanged = { key, isEnabled ->
                    // Toggle dark mode based on the switch state
                    viewModel.updatePreference(key, isEnabled)
                }
            )

            Spacer(modifier = Modifier.height(16.dp))

            // Toggle for Account Privacy setting
            SettingItemToggle(
                settingKey = "account_privacy",
                settingLabel = "Private Account",
                isChecked = accountPrivacyEnabled,
                onSettingChanged = { key, isEnabled ->
                    viewModel.updatePreference(key, isEnabled)
                }
            )
        }
    }
}

File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\screens\SwipingScreen.kt
File Name: SwipingScreen.kt
File Type: .kt
Contents:
package com.dogshare.ui.screens

import android.Manifest
import android.content.pm.PackageManager
import android.util.Log
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp
import androidx.core.app.ActivityCompat
import androidx.lifecycle.viewmodel.compose.viewModel
import coil.compose.rememberAsyncImagePainter
import com.dogshare.R
import com.dogshare.models.DogProfile
import com.dogshare.ui.components.Direction
import com.dogshare.ui.components.SwipeableCard
import com.dogshare.ui.components.ToastUtils
import com.dogshare.ui.components.captureLocation
import com.dogshare.ui.components.rememberSwipeableCardState
import com.dogshare.ui.components.storeLocationInFirestore
import com.google.android.gms.location.LocationServices
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.launch

@Composable
fun SwipingScreen(
    userId: String,
    viewModel: SwipingScreenViewModel = viewModel(),
    modifier: Modifier = Modifier
) {
    val context = LocalContext.current
    val fusedLocationClient = remember { LocationServices.getFusedLocationProviderClient(context) }
    val firestore = FirebaseFirestore.getInstance()
    val coroutineScope = rememberCoroutineScope()

    var location by remember { mutableStateOf<Pair<Double, Double>?>(null) }

    // Location permission launcher
    val locationPermissionLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.RequestPermission(),
        onResult = { granted ->
            if (granted) {
                captureLocation(context, fusedLocationClient) { lat, lon ->
                    location = Pair(lat, lon)
                    storeLocationInFirestore(userId, lat, lon, firestore)
                }
            } else {
                ToastUtils.showToast(context, "Location permission denied.")
            }
        }
    )

    // Request location permission if not already granted
    LaunchedEffect(Unit) {
        if (ActivityCompat.checkSelfPermission(
                context,
                Manifest.permission.ACCESS_FINE_LOCATION
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            locationPermissionLauncher.launch(Manifest.permission.ACCESS_FINE_LOCATION)
        } else {
            captureLocation(context, fusedLocationClient) { lat, lon ->
                location = Pair(lat, lon)
                storeLocationInFirestore(userId, lat, lon, firestore)
            }
        }
    }

    LaunchedEffect(viewModel.currentPhotoIndex) {
        Log.i("SwipingScreen", "Current photo index: ${viewModel.currentPhotoIndex}")
    }

    // Fetch dog photos
    LaunchedEffect(Unit) {
        viewModel.fetchDogProfiles("nNC9XgA77_sgn-co85RYbEaawFa-zopkHRokr7HkSN0")
    }


    if (viewModel.dogProfiles.isEmpty() || viewModel.currentPhotoIndex >= viewModel.dogProfiles.size) {
        // Show loading indicator if there are no photos or still loading
        Box(
            modifier = modifier.fillMaxSize(),
            contentAlignment = Alignment.Center
        ) {
            CircularProgressIndicator()
        }
    } else {
        Box(
            modifier = modifier
                .fillMaxSize()
                .padding(16.dp),
            contentAlignment = Alignment.Center
        ) {
            // Full-screen swipeable card image
            val state = rememberSwipeableCardState()

            SwipeableCard(
                userId = userId,
                DogProfile = viewModel.dogProfiles.map { it.imageUrl },  // List of dog photo URLs
                currentPhotoIndex = viewModel.currentPhotoIndex,
                state = state,
                modifier = Modifier.fillMaxSize(),
                onSwipeComplete = { direction ->
                    coroutineScope.launch {
                        when (direction) {
                            Direction.LEFT -> println("Swiped left: Dislike")
                            Direction.RIGHT -> println("Swiped right: Like")
                            Direction.UP -> println("Swiped up: Skip")
                            Direction.DOWN -> println("Swiped down: Super Like")
                        }
                        viewModel.updatePhotoIndex()
                        Log.i("SwipingScreen", "Current photo index: ${viewModel.currentPhotoIndex}")
                    }
                }
            ) {
                Image(
                    painter = rememberAsyncImagePainter(
                        model = viewModel.dogProfiles[viewModel.currentPhotoIndex].imageUrl
                    ),
                    contentDescription = "Dog Image",
                    modifier = Modifier.fillMaxSize(),
                    contentScale = ContentScale.Crop
                )
            }

            // Overlay Logo and Title on top of the image
            Column(
                modifier = Modifier
                    .align(Alignment.TopCenter)  // Align the logo and title at the top of the image
                    .padding(top = 16.dp),  // Padding for the logo and title
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                // Dogshare logo
                Image(
                    painter = painterResource(id = R.drawable.ic_launcher_round),
                    contentDescription = "Dogshare Logo",
                    modifier = Modifier.size(64.dp)  // Adjust logo size as needed
                )
                // Dogshare title
                Text(
                    text = "Dogshare",
                    style = MaterialTheme.typography.headlineLarge,
                    color = Color.White,  // White color to make the title visible over the image
                    modifier = Modifier.padding(top = 8.dp)
                )
            }
        }
    }
}



File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\screens\WelcomeScreen.kt
File Name: WelcomeScreen.kt
File Type: .kt
Contents:
package com.dogshare.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun WelcomeScreen(username: String) {
    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Welcome, $username") }
            )
        },
        content = { paddingValues ->
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(paddingValues)
                    .padding(16.dp),
                verticalArrangement = Arrangement.Center
            ) {
                Text("Welcome to DogShare!", fontSize = 32.sp, modifier = Modifier.padding(16.dp))
                Text("Let's start exploring.", fontSize = 24.sp, modifier = Modifier.padding(16.dp))
                Button(onClick = { /* Start Exploring */ }, modifier = Modifier.fillMaxWidth()) {
                    Text("Get Started")
                }
            }
        }
    )
}


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\theme\Theme.kt
File Name: Theme.kt
File Type: .kt
Contents:
package com.dogshare.ui.theme

import androidx.compose.material3.Typography
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext

// Define your dark color palette
private val DarkColorScheme = darkColorScheme(
    primary = Color(0xFFBB86FC),
    secondary = Color(0xFF03DAC6),
    background = Color(0xFF121212),
    surface = Color(0xFF121212),
    onPrimary = Color.White,
    onSecondary = Color.Black,
    onBackground = Color.White,
    onSurface = Color.White
)

// Define your light color palette
private val LightColorScheme = lightColorScheme(
    primary = Color(0xFF6200EE),
    secondary = Color(0xFF03DAC5),
    background = Color(0xFFFFFBFE),
    surface = Color(0xFFFFFBFE),
    onPrimary = Color.White,
    onSecondary = Color.Black,
    onBackground = Color.Black,
    onSurface = Color.Black
)

@Composable
fun DogShareTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }
        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }

    MaterialTheme(
        colorScheme = colorScheme,
        content = content
    )
}


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\viewmodels\AuthViewModel.kt
File Name: AuthViewModel.kt
File Type: .kt
Contents:
package com.dogshare.viewmodels

import android.content.Context
import android.content.SharedPreferences
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.google.firebase.auth.FirebaseAuth
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class AuthViewModel(context: Context) : ViewModel() {

    private val PREFS_NAME = "com.dogshare.prefs"
    private val KEY_IS_LOGGED_IN = "isLoggedIn"
    private val firebaseAuth = FirebaseAuth.getInstance()

    private val prefs: SharedPreferences = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)

    private val _isLoggedIn = MutableStateFlow(false)
    val isLoggedIn: StateFlow<Boolean> = _isLoggedIn

    init {
        // Initialize login state on app launch
        updateLoginState(firebaseAuth.currentUser != null)
        listenForAuthStateChanges()
    }

    private fun listenForAuthStateChanges() {
        firebaseAuth.addAuthStateListener { auth ->
            val userLoggedIn = auth.currentUser != null
            updateLoginState(userLoggedIn)
        }
    }

    private fun updateLoginState(isLoggedIn: Boolean) {
        // Save the login state in SharedPreferences
        prefs.edit().putBoolean(KEY_IS_LOGGED_IN, isLoggedIn).apply()
        _isLoggedIn.value = isLoggedIn
    }

    fun updateLoginStatus(isLoggedIn: Boolean) {
        viewModelScope.launch {
            if (isLoggedIn) {
                // Add additional login logic here if necessary
                firebaseAuth.currentUser?.let {
                    updateLoginState(true)
                }
            } else {
                // Handle logout and clear shared preferences
                firebaseAuth.signOut()
                updateLoginState(false)
            }
        }
    }
}


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\viewmodels\CreateAccountViewModel.kt
File Name: CreateAccountViewModel.kt
File Type: .kt
Contents:
package com.dogshare.viewmodels

import androidx.compose.runtime.mutableStateOf
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.dogshare.repository.PreferencesRepository
import com.dogshare.services.AuthService
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class CreateAccountViewModel(
    private val authService: AuthService,
    private val preferencesRepository: PreferencesRepository
) : ViewModel() {

    var email = mutableStateOf("")
        private set
    var password = mutableStateOf("")
        private set
    var confirmPassword = mutableStateOf("")
        private set

    private val _createAccountState = MutableStateFlow("")
    val createAccountState: StateFlow<String> = _createAccountState

    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading

    fun updateEmail(newEmail: String) {
        email.value = newEmail
    }

    fun updatePassword(newPassword: String) {
        password.value = newPassword
    }

    fun updateConfirmPassword(newConfirmPassword: String) {
        confirmPassword.value = newConfirmPassword
    }

    fun createAccount() {
        if (password.value != confirmPassword.value) {
            _createAccountState.value = "Passwords do not match"
            return
        }

        _isLoading.value = true
        viewModelScope.launch {
            val result = authService.createAccount(email.value, password.value)
            _isLoading.value = false
            _createAccountState.value = result.fold(
                onSuccess = { "Account created successfully!" },
                onFailure = { it.message ?: "An error occurred during account creation." }
            )
        }
    }
}

File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\viewmodels\LoginViewModel.kt
File Name: LoginViewModel.kt
File Type: .kt
Contents:
package com.dogshare.viewmodels

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.dogshare.services.AuthService
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import com.dogshare.repository.PreferencesRepository

class LoginViewModel(
    private val authService: AuthService,
    private val preferencesRepository: PreferencesRepository
) : ViewModel() {

    private val _email = MutableStateFlow("")
    val email: StateFlow<String> = _email

    private val _password = MutableStateFlow("")
    val password: StateFlow<String> = _password

    private val _loginState = MutableStateFlow("")
    val loginState: StateFlow<String> = _loginState

    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading

    fun updateEmail(newEmail: String) {
        _email.value = newEmail
    }

    fun updatePassword(newPassword: String) {
        _password.value = newPassword
    }

    fun login() {
        _isLoading.value = true
        viewModelScope.launch {
            val result = authService.signIn(_email.value, _password.value)
            _isLoading.value = false
            result.fold(
                onSuccess = {
                    // Save user ID on successful login
                    preferencesRepository.setUserId(it)
                    _loginState.value = "Login successful!"
                },
                onFailure = {
                    _loginState.value = it.message ?: "An error occurred during login."
                }
            )
        }
    }
}

File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\viewmodels\LogOutViewModel.kt
File Name: LogOutViewModel.kt
File Type: .kt
Contents:
package com.dogshare.viewmodels

import android.content.Context
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.dogshare.repository.PreferencesRepository
import com.google.firebase.auth.FirebaseAuth
import kotlinx.coroutines.launch
import org.koin.java.KoinJavaComponent.inject

class LogoutViewModel(private val context: Context) : ViewModel() {

    private val auth: FirebaseAuth = FirebaseAuth.getInstance()
    private val preferencesRepository: PreferencesRepository by inject(PreferencesRepository::class.java)

    fun logout(onLogoutSuccess: () -> Unit) {
        viewModelScope.launch {
            auth.signOut()  // Firebase sign out
            preferencesRepository.clearUserId()
            preferencesRepository.setPromptLogin(true)

            // Clear app cache or additional session data
            clearAppCache()

            onLogoutSuccess()
        }
    }

    private fun clearAppCache() {
        val sharedPreferences = context.getSharedPreferences("app_preferences", Context.MODE_PRIVATE)
        sharedPreferences.edit().clear().apply() // Clear preferences
        // You can also clean up other cached files or temporary data here
    }
}


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\viewmodels\MainViewModel.kt
File Name: MainViewModel.kt
File Type: .kt
Contents:
package com.dogshare.viewmodels

import android.content.Context
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.google.firebase.auth.FirebaseAuth
import kotlinx.coroutines.launch
import java.util.concurrent.TimeUnit

class MainViewModel(private val auth: FirebaseAuth) : ViewModel() {

    fun checkUserStatus(context: Context, onStatusChecked: (isLoggedIn: Boolean) -> Unit) {
        viewModelScope.launch {
            val sharedPreferences = context.getSharedPreferences("app_preferences", Context.MODE_PRIVATE)
            val lastLoginTimestamp = sharedPreferences.getLong("last_login_timestamp", 0L)
            val currentTime = System.currentTimeMillis()
            val daysSinceLastLogin = TimeUnit.MILLISECONDS.toDays(currentTime - lastLoginTimestamp)

            if (auth.currentUser != null && daysSinceLastLogin <= 30) {
                // User is logged in and active within 30 days
                onStatusChecked(true)
            } else {
                // Session expired or user not logged in, clear session data
                auth.signOut()
                sharedPreferences.edit().clear().apply()
                onStatusChecked(false)
            }
        }
    }
}


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\viewmodels\ProfileUpdateViewModel.kt
File Name: ProfileUpdateViewModel.kt
File Type: .kt
Contents:
package com.dogshare.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.unit.dp
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import com.google.firebase.firestore.FirebaseFirestore
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack

class ProfileUpdateViewModel : ViewModel() {
    private val db = FirebaseFirestore.getInstance()

    // State for loading and updating the UI based on data operations
    var operationStatus = mutableStateOf("")
    var userProfile = mutableStateOf(UserProfile("", "", "", "", "", ""))

    fun loadUserProfile(userId: String) {
        db.collection("profiles").document(userId)
            .get()
            .addOnSuccessListener { document ->
                if (document != null && document.exists()) {
                    val profile = document.toObject(UserProfile::class.java)
                    userProfile.value = profile ?: UserProfile("", "", "", "", "", "")
                }
            }
            .addOnFailureListener {
                operationStatus.value = "Failed to load profile: ${it.message}"
            }
    }

    fun updateProfile(userId: String, data: Map<String, Any>, onSuccess: () -> Unit, onError: (String) -> Unit) {
        db.collection("profiles").document(userId)
            .set(data)
            .addOnSuccessListener { onSuccess() }
            .addOnFailureListener { e -> onError(e.localizedMessage ?: "Unknown error occurred") }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ProfileUpdateScreen(
    userId: String,
    navController: NavController,
    viewModel: ProfileUpdateViewModel = viewModel()
) {
    // This will cause the screen to reload user profile on composition or re-compositions triggered by lifecycle events.
    LaunchedEffect(key1 = userId) {
        viewModel.loadUserProfile(userId)
    }

    // Accessing state directly
    val userProfile = viewModel.userProfile.value
    val statusMessage = viewModel.operationStatus.value

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Update Profile") },
                navigationIcon = {
                    IconButton(onClick = { navController.popBackStack() }) {
                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                    }
                }
            )
        }
    ) { padding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(padding)
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(10.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            TextField(
                value = userProfile.email,
                onValueChange = { viewModel.userProfile.value = userProfile.copy(email = it) },
                label = { Text("Email") },
                singleLine = true,
                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Next)
            )
            // Additional fields are added similarly...

            Button(
                onClick = {
                    viewModel.updateProfile(userId, userProfile.toMap(), onSuccess = {
                        viewModel.operationStatus.value = "Profile Updated Successfully"
                    }, onError = { error ->
                        viewModel.operationStatus.value = error
                    })
                },
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("Update")
            }

            // Showing status message with a condition
            if (statusMessage.isNotEmpty()) {
                Text(text = statusMessage, color = MaterialTheme.colorScheme.error)
                // Clear the status message after showing it
                LaunchedEffect(statusMessage) {
                    viewModel.operationStatus.value = ""
                }
            }
        }
    }
}

// Example of a helper function inside the UserProfile data class to convert to Map
data class UserProfile(
    var email: String,
    var petType: String,
    var petSize: String,
    var livingCondition: String,
    var activityLevel: String,
    var travelDistance: String
) {
    fun toMap(): Map<String, Any> {
        return mapOf(
            "email" to email,
            "petType" to petType,
            "petSize" to petSize,
            "livingCondition" to livingCondition,
            "activityLevel" to activityLevel,
            "travelDistance" to travelDistance
        )
    }
}

File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\viewmodels\ProfileViewModel.kt
File Name: ProfileViewModel.kt
File Type: .kt
Contents:
package com.dogshare.viewmodels

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class ProfileViewModel : ViewModel() {
    private val db = FirebaseFirestore.getInstance()

    // States for profile fields
    private val _email = MutableStateFlow("")
    val email: StateFlow<String> = _email

    private val _petType = MutableStateFlow("")
    val petType: StateFlow<String> = _petType

    private val _petSize = MutableStateFlow("")
    val petSize: StateFlow<String> = _petSize

    private val _livingCondition = MutableStateFlow("")
    val livingCondition: StateFlow<String> = _livingCondition

    private val _activityLevel = MutableStateFlow("")
    val activityLevel: StateFlow<String> = _activityLevel

    private val _travelDistance = MutableStateFlow("")
    val travelDistance: StateFlow<String> = _travelDistance

    private val _saveProfileState = MutableStateFlow("")
    val saveProfileState: StateFlow<String> = _saveProfileState

    private val _isLoading = MutableStateFlow(true)
    val isLoading: StateFlow<Boolean> = _isLoading

    // Fetch profile data from Firestore
    fun fetchProfile(userId: String) {
        _isLoading.value = true
        db.collection("profiles").document(userId).get()
            .addOnSuccessListener { document ->
                if (document.exists()) {
                    _email.value = document.getString("email") ?: ""
                    _petType.value = document.getString("petType") ?: ""
                    _petSize.value = document.getString("petSize") ?: ""
                    _livingCondition.value = document.getString("livingCondition") ?: ""
                    _activityLevel.value = document.getString("activityLevel") ?: ""
                    _travelDistance.value = document.getString("travelDistance") ?: ""
                }
                _isLoading.value = false
            }
            .addOnFailureListener { e ->
                Log.e("ProfileViewModel", "Error fetching profile: ${e.message}")
                _saveProfileState.value = "Error fetching profile: ${e.message}"
                _isLoading.value = false
            }
    }

    // Save profile data to Firestore
    fun saveProfile(userId: String) {
        _isLoading.value = true
        val userProfile = mapOf(
            "email" to _email.value,
            "petType" to _petType.value,
            "petSize" to _petSize.value,
            "livingCondition" to _livingCondition.value,
            "activityLevel" to _activityLevel.value,
            "travelDistance" to _travelDistance.value
        )
        db.collection("profiles").document(userId)
            .set(userProfile)
            .addOnSuccessListener {
                _saveProfileState.value = "Profile Updated Successfully"
                _isLoading.value = false
            }
            .addOnFailureListener { e ->
                Log.e("ProfileViewModel", "Error updating profile: ${e.message}")
                _saveProfileState.value = "Error updating profile: ${e.message}"
                _isLoading.value = false
            }
    }

    // Functions to update individual fields
    fun updateEmail(newEmail: String) {
        _email.value = newEmail
    }

    fun updatePetType(newPetType: String) {
        _petType.value = newPetType
    }

    fun updatePetSize(newPetSize: String) {
        _petSize.value = newPetSize
    }

    fun updateLivingCondition(newLivingCondition: String) {
        _livingCondition.value = newLivingCondition
    }

    fun updateActivityLevel(newActivityLevel: String) {
        _activityLevel.value = newActivityLevel
    }

    fun updateTravelDistance(newTravelDistance: String) {
        _travelDistance.value = newTravelDistance
    }
}

File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\viewmodels\SettingsViewModel.kt
File Name: SettingsViewModel.kt
File Type: .kt
Contents:
package com.dogshare.viewmodels

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.dogshare.repository.PreferencesRepository
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class SettingsViewModel(
    private val preferencesRepository: PreferencesRepository
) : ViewModel() {

    private val _notificationsEnabled = MutableStateFlow(false)
    val notificationsEnabled: StateFlow<Boolean> = _notificationsEnabled

    private val _darkModeEnabled = MutableStateFlow(false)
    val darkModeEnabled: StateFlow<Boolean> = _darkModeEnabled

    private val _accountPrivacyEnabled = MutableStateFlow(false)
    val accountPrivacyEnabled: StateFlow<Boolean> = _accountPrivacyEnabled

    // Function to load preferences from PreferencesRepository
    fun loadPreferences() {
        viewModelScope.launch {
            _notificationsEnabled.value = preferencesRepository.getNotificationsEnabled()
            _darkModeEnabled.value = preferencesRepository.getDarkModeEnabled()
            _accountPrivacyEnabled.value = preferencesRepository.getAccountPrivacyEnabled()
        }
    }

    // Function to update preference and save it using PreferencesRepository
    fun updatePreference(key: String, value: Boolean) {
        viewModelScope.launch {
            when (key) {
                "notifications" -> {
                    _notificationsEnabled.value = value
                    preferencesRepository.setNotificationsEnabled(value)
                }
                "dark_mode" -> {
                    _darkModeEnabled.value = value
                    preferencesRepository.setDarkModeEnabled(value)
                }
                "account_privacy" -> {
                    _accountPrivacyEnabled.value = value
                    preferencesRepository.setAccountPrivacyEnabled(value)
                }
            }
        }
    }
}

File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\viewmodels\SwipingScreenViewModel.kt
File Name: SwipingScreenViewModel.kt
File Type: .kt
Contents:
package com.dogshare.ui.screens

import android.util.Log
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.dogshare.api.UnsplashPhoto
import com.dogshare.network.RetrofitClient
import kotlinx.coroutines.launch
import retrofit2.HttpException
import java.io.IOException
import com.dogshare.models.DogProfile

class SwipingScreenViewModel : ViewModel() {
    var dogProfiles by mutableStateOf<List<DogProfile>>(emptyList())  // List of DogProfile objects
    var currentPhotoIndex by mutableStateOf(0)
    var errorMessage by mutableStateOf<String?>(null)

    // Sample dog data
    private val dogNames = listOf("Max", "Bella", "Charlie", "Luna", "Rocky")
    private val dogBreeds = listOf("Golden Retriever", "Bulldog", "Poodle", "Beagle", "Shiba Inu")
    private val dogAges = listOf(2, 3, 4, 5, 6)

    // Fetch dog profiles and link each one to a photo from Unsplash
    fun fetchDogProfiles(accessKey: String) {
        viewModelScope.launch {
            try {
                val api = RetrofitClient.getClient()
                val response = api.getRandomDogPhotos(accessKey)
                if (response.isSuccessful) {
                    val photos = response.body() ?: emptyList()
                    dogProfiles = photos.mapIndexed { index, unsplashPhoto ->
                        DogProfile(
                            name = dogNames[index % dogNames.size],
                            age = dogAges.random(),
                            breed = dogBreeds.random(),
                            imageUrl = unsplashPhoto.urls.regular
                        )
                    }
                    Log.i("SwipingScreenViewModel", "Dog profiles loaded: ${dogProfiles.size}")
                } else {
                    errorMessage = "Failed to fetch photos: ${response.code()}"
                }
            } catch (e: Exception) {
                errorMessage = "An error occurred: ${e.message}"
            }
        }
    }


    // Update the current photo index for swiping
    fun updatePhotoIndex() {
        if (dogProfiles.isNotEmpty()) {
            currentPhotoIndex = (currentPhotoIndex + 1) % dogProfiles.size
            Log.i("SwipingScreenViewModel", "New currentPhotoIndex: $currentPhotoIndex")
            // Pre-fetch more profiles if near the end of the list
            if (currentPhotoIndex > dogProfiles.size - 2) {  // Adjust threshold as needed
                fetchDogProfiles("nNC9XgA77_sgn-co85RYbEaawFa-zopkHRokr7HkSN0")
            }
        } else {
            Log.i("SwipingScreenViewModel", "No photos to display.")
        }
    }

}


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\AndroidManifest.xml
File Name: AndroidManifest.xml
File Type: .xml
Contents:
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- Location permissions -->
    <uses-permission android:name="android.permission.BLUETOOTH_CONNECT" />
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>
    <uses-permission android:name="android.permission.ACCESS_BACKGROUND_LOCATION"/>

    <!-- Internet Access permissions -->
    <uses-permission android:name="android.permission.INTERNET"/>
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>


    <application
        android:name=".DogShareApp"
        android:allowBackup="true"
        android:fullBackupContent="@xml/backup_rules"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="Dog Share"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.DogShare">

        <activity
            android:name=".ui.MainActivity"
            android:exported="true"
            android:theme="@style/Theme.DogShare">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

    </application>

</manifest>


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\res\drawable\ic_launcher_background.xml
File Name: ic_launcher_background.xml
File Type: .xml
Contents:
<?xml version="1.0" encoding="utf-8"?>
<vector
    android:height="108dp"
    android:width="108dp"
    android:viewportHeight="108"
    android:viewportWidth="108"
    xmlns:android="http://schemas.android.com/apk/res/android">
    <path android:fillColor="#3DDC84"
          android:pathData="M0,0h108v108h-108z"/>
    <path android:fillColor="#00000000" android:pathData="M9,0L9,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,0L19,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M29,0L29,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M39,0L39,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M49,0L49,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M59,0L59,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M69,0L69,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M79,0L79,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M89,0L89,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M99,0L99,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,9L108,9"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,19L108,19"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,29L108,29"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,39L108,39"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,49L108,49"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,59L108,59"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,69L108,69"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,79L108,79"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,89L108,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,99L108,99"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,29L89,29"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,39L89,39"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,49L89,49"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,59L89,59"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,69L89,69"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,79L89,79"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M29,19L29,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M39,19L39,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M49,19L49,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M59,19L59,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M69,19L69,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M79,19L79,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
</vector>


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\res\drawable\ic_visibility.xml
File Name: ic_visibility.xml
File Type: .xml
Contents:
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M12,4.5C7,4.5 2.73,7.61 1,12c1.73,4.39 6,7.5 11,7.5s9.27,-3.11 11,-7.5c-1.73,-4.39 -6,-7.5 -11,-7.5zM12,17c-2.76,0 -5,-2.24 -5,-5s2.24,-5 5,-5 5,2.24 5,5 -2.24,5 -5,5zM12,9c-1.66,0 -3,1.34 -3,3s1.34,3 3,3 3,-1.34 3,-3 -1.34,-3 -3,-3z"/>
    
</vector>


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\res\drawable\ic_visibility_off.xml
File Name: ic_visibility_off.xml
File Type: .xml
Contents:
<vector xmlns:android="http://schemas.android.com/apk/res/android" android:height="24dp" android:tint="#000000" android:viewportHeight="24" android:viewportWidth="24" android:width="24dp">
      
    <path android:fillColor="@android:color/white" android:pathData="M12,7c2.76,0 5,2.24 5,5 0,0.65 -0.13,1.26 -0.36,1.83l2.92,2.92c1.51,-1.26 2.7,-2.89 3.43,-4.75 -1.73,-4.39 -6,-7.5 -11,-7.5 -1.4,0 -2.74,0.25 -3.98,0.7l2.16,2.16C10.74,7.13 11.35,7 12,7zM2,4.27l2.28,2.28 0.46,0.46C3.08,8.3 1.78,10.02 1,12c1.73,4.39 6,7.5 11,7.5 1.55,0 3.03,-0.3 4.38,-0.84l0.42,0.42L19.73,22 21,20.73 3.27,3 2,4.27zM7.53,9.8l1.55,1.55c-0.05,0.21 -0.08,0.43 -0.08,0.65 0,1.66 1.34,3 3,3 0.22,0 0.44,-0.03 0.65,-0.08l1.55,1.55c-0.67,0.33 -1.41,0.53 -2.2,0.53 -2.76,0 -5,-2.24 -5,-5 0,-0.79 0.2,-1.53 0.53,-2.2zM11.84,9.02l3.15,3.15 0.02,-0.16c0,-1.66 -1.34,-3 -3,-3l-0.17,0.01z"/>
    
</vector>


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\res\mipmap-anydpi-v26\ic_launcher.xml
File Name: ic_launcher.xml
File Type: .xml
Contents:
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background"/>
    <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
</adaptive-icon>

File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\res\mipmap-anydpi-v26\ic_launcher_round.xml
File Name: ic_launcher_round.xml
File Type: .xml
Contents:
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background"/>
    <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
</adaptive-icon>

File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\res\values\colors.xml
File Name: colors.xml
File Type: .xml
Contents:
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
</resources>

File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\res\values\strings.xml
File Name: strings.xml
File Type: .xml
Contents:
<resources>
    <string name="app_name">Dog Share</string>
    <string name="default_web_client_id">254869163965-p0medkisngt0sj2t1r24pku9v08p3kgm.apps.googleusercontent.com</string>
</resources>

File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\res\values\themes.xml
File Name: themes.xml
File Type: .xml
Contents:
<?xml version="1.0" encoding="utf-8"?>
<resources>

    <style name="Theme.DogShare" parent="Theme.MaterialComponents.DayNight.NoActionBar">
        <!-- Light theme colors -->
        <item name="colorPrimary">@color/purple_500</item>
        <item name="colorPrimaryVariant">@color/purple_700</item>
        <item name="colorOnPrimary">@color/white</item>
        <item name="colorSecondary">@color/teal_200</item>
        <item name="colorOnSecondary">@color/black</item>
    </style>

</resources>

File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\res\values-night\colors.xml
File Name: colors.xml
File Type: .xml
Contents:
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- Primary colors -->
    <color name="purple_500">#6200EE</color>
    <color name="purple_700">#3700B3</color>
    <color name="teal_200">#03DAC5</color>

    <!-- Custom dark mode colors -->
    <color name="dark_gray">#121212</color>
    <color name="black">#000000</color>
    <color name="light_gray">#D3D3D3</color>

    <!-- Other colors -->
    <color name="white">#FFFFFF</color>
</resources>


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\res\values-night\strings.xml
File Name: strings.xml
File Type: .xml
Contents:
<resources>
    <string name="app_name">Dog Share</string>
</resources>

File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\res\values-night\themes.xml
File Name: themes.xml
File Type: .xml
Contents:
<?xml version="1.0" encoding="utf-8"?>
<resources>

    <style name="Theme.DogShare" parent="Theme.MaterialComponents.DayNight.NoActionBar">
        <!-- Dark theme colors -->
        <item name="colorPrimary">@color/black</item>
        <item name="colorPrimaryVariant">@color/dark_gray</item>
        <item name="colorOnPrimary">@color/white</item>
        <item name="colorSecondary">@color/light_gray</item>
        <item name="colorOnSecondary">@color/white</item>
    </style>

</resources>

File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\res\xml\backup_rules.xml
File Name: backup_rules.xml
File Type: .xml
Contents:
<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older that API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>

File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\res\xml\data_extraction_rules.xml
File Name: data_extraction_rules.xml
File Type: .xml
Contents:
<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>

