File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\ui\screens\ProfileScreen.kt
File Name: ProfileScreen.kt
File Type: .kt
Contents:
package com.dogshare.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.dogshare.viewmodels.LogoutViewModel
import com.dogshare.viewmodels.ProfileViewModel
import org.koin.androidx.compose.koinViewModel
import com.dogshare.ui.components.BottomNavigationBar

@Composable
fun ProfileScreen(
    userId: String,
    navController: NavController,
    viewModel: ProfileViewModel = koinViewModel(),
    logoutViewModel: LogoutViewModel = koinViewModel()
) {
    val email by viewModel.email.collectAsState()
    val petType by viewModel.petType.collectAsState()
    val petSize by viewModel.petSize.collectAsState()
    val livingCondition by viewModel.livingCondition.collectAsState()
    val activityLevel by viewModel.activityLevel.collectAsState()
    val travelDistance by viewModel.travelDistance.collectAsState()
    val saveProfileState by viewModel.saveProfileState.collectAsState()
    val isLoading by viewModel.isLoading.collectAsState()

    LaunchedEffect(userId) {
        viewModel.fetchProfile(userId)
    }

    Scaffold(
        bottomBar = { BottomNavigationBar(navController = navController, userId = userId) }
    ) { innerPadding ->
        if (isLoading) {
            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                CircularProgressIndicator()
            }
        } else {
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(innerPadding)
                    .padding(16.dp),
                verticalArrangement = Arrangement.Center,
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(text = "Profile", style = MaterialTheme.typography.headlineSmall)
                Spacer(modifier = Modifier.height(16.dp))

                // Dynamic fields with save logic
                OutlinedTextField(
                    value = email,
                    onValueChange = { viewModel.updateEmail(it) },
                    label = { Text("Email") },
                    singleLine = true,
                    keyboardOptions = KeyboardOptions.Default.copy(imeAction = ImeAction.Done),
                    modifier = Modifier.fillMaxWidth()
                )
                OutlinedTextField(
                    value = petType,
                    onValueChange = { viewModel.updatePetType(it) },
                    label = { Text("Pet Type") },
                    modifier = Modifier.fillMaxWidth()
                )
                OutlinedTextField(
                    value = petSize,
                    onValueChange = { viewModel.updatePetSize(it) },
                    label = { Text("Pet Size") },
                    modifier = Modifier.fillMaxWidth()
                )
                OutlinedTextField(
                    value = livingCondition,
                    onValueChange = { viewModel.updateLivingCondition(it) },
                    label = { Text("Living Condition") },
                    modifier = Modifier.fillMaxWidth()
                )
                OutlinedTextField(
                    value = activityLevel,
                    onValueChange = { viewModel.updateActivityLevel(it) },
                    label = { Text("Activity Level") },
                    modifier = Modifier.fillMaxWidth()
                )
                OutlinedTextField(
                    value = travelDistance,
                    onValueChange = { viewModel.updateTravelDistance(it) },
                    label = { Text("Travel Distance") },
                    modifier = Modifier.fillMaxWidth()
                )

                Spacer(modifier = Modifier.height(16.dp))

                Button(
                    onClick = {
                        viewModel.saveProfile(userId)
                    },
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Text("Save Profile")
                }

                if (saveProfileState.isNotEmpty()) {
                    Text(saveProfileState, color = MaterialTheme.colorScheme.error)
                }

                Spacer(modifier = Modifier.height(16.dp))

                Button(
                    onClick = {
                        logoutViewModel.logout {
                            navController.navigate("login") {
                                popUpTo(0) { inclusive = true }  // Clear back stack
                            }
                        }
                    },
                    modifier = Modifier.fillMaxWidth(),
                    colors = ButtonDefaults.buttonColors(MaterialTheme.colorScheme.error)
                ) {
                    Text("Log Out")
                }
            }
        }
    }
}


File Path: C:\Users\b.martynowicz\AndroidStudioProjects\DogShare\app\src\main\java\com\dogshare\viewmodels\ProfileViewModel.kt
File Name: ProfileViewModel.kt
File Type: .kt
Contents:
package com.dogshare.viewmodels

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class ProfileViewModel : ViewModel() {
    private val db = FirebaseFirestore.getInstance()

    // States for profile fields
    private val _email = MutableStateFlow("")
    val email: StateFlow<String> = _email

    private val _petType = MutableStateFlow("")
    val petType: StateFlow<String> = _petType

    private val _petSize = MutableStateFlow("")
    val petSize: StateFlow<String> = _petSize

    private val _livingCondition = MutableStateFlow("")
    val livingCondition: StateFlow<String> = _livingCondition

    private val _activityLevel = MutableStateFlow("")
    val activityLevel: StateFlow<String> = _activityLevel

    private val _travelDistance = MutableStateFlow("")
    val travelDistance: StateFlow<String> = _travelDistance

    private val _saveProfileState = MutableStateFlow("")
    val saveProfileState: StateFlow<String> = _saveProfileState

    private val _isLoading = MutableStateFlow(true)
    val isLoading: StateFlow<Boolean> = _isLoading

    // Fetch profile data from Firestore
    fun fetchProfile(userId: String) {
        _isLoading.value = true
        db.collection("profiles").document(userId).get()
            .addOnSuccessListener { document ->
                if (document.exists()) {
                    _email.value = document.getString("email") ?: ""
                    _petType.value = document.getString("petType") ?: ""
                    _petSize.value = document.getString("petSize") ?: ""
                    _livingCondition.value = document.getString("livingCondition") ?: ""
                    _activityLevel.value = document.getString("activityLevel") ?: ""
                    _travelDistance.value = document.getString("travelDistance") ?: ""
                }
                _isLoading.value = false
            }
            .addOnFailureListener { e ->
                Log.e("ProfileViewModel", "Error fetching profile: ${e.message}")
                _saveProfileState.value = "Error fetching profile: ${e.message}"
                _isLoading.value = false
            }
    }

    // Save profile data to Firestore
    fun saveProfile(userId: String) {
        _isLoading.value = true
        val userProfile = mapOf(
            "email" to _email.value,
            "petType" to _petType.value,
            "petSize" to _petSize.value,
            "livingCondition" to _livingCondition.value,
            "activityLevel" to _activityLevel.value,
            "travelDistance" to _travelDistance.value
        )
        db.collection("profiles").document(userId)
            .set(userProfile)
            .addOnSuccessListener {
                _saveProfileState.value = "Profile Updated Successfully"
                _isLoading.value = false
            }
            .addOnFailureListener { e ->
                Log.e("ProfileViewModel", "Error updating profile: ${e.message}")
                _saveProfileState.value = "Error updating profile: ${e.message}"
                _isLoading.value = false
            }
    }

    // Functions to update individual fields
    fun updateEmail(newEmail: String) {
        _email.value = newEmail
    }

    fun updatePetType(newPetType: String) {
        _petType.value = newPetType
    }

    fun updatePetSize(newPetSize: String) {
        _petSize.value = newPetSize
    }

    fun updateLivingCondition(newLivingCondition: String) {
        _livingCondition.value = newLivingCondition
    }

    fun updateActivityLevel(newActivityLevel: String) {
        _activityLevel.value = newActivityLevel
    }

    fun updateTravelDistance(newTravelDistance: String) {
        _travelDistance.value = newTravelDistance
    }
}

